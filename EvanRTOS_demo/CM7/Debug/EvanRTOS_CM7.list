
EvanRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e0  080064e0  000080ac  2**0
                  CONTENTS
  4 .ARM          00000008  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e8  080064e8  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000074e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  24000000  080064f0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  240000ac  0800659c  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000570  0800659c  00008570  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a98  00000000  00000000  000080da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002784  00000000  00000000  00019b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0001c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000974  00000000  00000000  0001cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f70e  00000000  00000000  0001d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123cb  00000000  00000000  0005cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195984  00000000  00000000  0006f3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00204d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  00204d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00208264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000ac 	.word	0x240000ac
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006490 	.word	0x08006490

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b0 	.word	0x240000b0
 80002dc:	08006490 	.word	0x08006490

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <SystemInit+0x12c>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <SystemInit+0x12c>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <SystemInit+0x12c>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a44      	ldr	r2, [pc, #272]	@ (80006fc <SystemInit+0x12c>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b43      	ldr	r3, [pc, #268]	@ (8000700 <SystemInit+0x130>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b40      	ldr	r3, [pc, #256]	@ (8000700 <SystemInit+0x130>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a3e      	ldr	r2, [pc, #248]	@ (8000700 <SystemInit+0x130>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <SystemInit+0x134>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a3c      	ldr	r2, [pc, #240]	@ (8000704 <SystemInit+0x134>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <SystemInit+0x134>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b39      	ldr	r3, [pc, #228]	@ (8000704 <SystemInit+0x134>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4938      	ldr	r1, [pc, #224]	@ (8000704 <SystemInit+0x134>)
 8000624:	4b38      	ldr	r3, [pc, #224]	@ (8000708 <SystemInit+0x138>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b35      	ldr	r3, [pc, #212]	@ (8000700 <SystemInit+0x130>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <SystemInit+0x130>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a30      	ldr	r2, [pc, #192]	@ (8000700 <SystemInit+0x130>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <SystemInit+0x134>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <SystemInit+0x134>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <SystemInit+0x134>)
 800065a:	4a2c      	ldr	r2, [pc, #176]	@ (800070c <SystemInit+0x13c>)
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemInit+0x134>)
 8000660:	4a2b      	ldr	r2, [pc, #172]	@ (8000710 <SystemInit+0x140>)
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <SystemInit+0x134>)
 8000666:	4a2b      	ldr	r2, [pc, #172]	@ (8000714 <SystemInit+0x144>)
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemInit+0x134>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <SystemInit+0x134>)
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <SystemInit+0x144>)
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <SystemInit+0x134>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <SystemInit+0x134>)
 800067e:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <SystemInit+0x144>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <SystemInit+0x134>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <SystemInit+0x134>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <SystemInit+0x134>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemInit+0x148>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <SystemInit+0x148>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <SystemInit+0x14c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <SystemInit+0x150>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <SystemInit+0x154>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <SystemInit+0x134>)
 80006bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d113      	bne.n	80006f0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <SystemInit+0x134>)
 80006ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <SystemInit+0x134>)
 80006d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <SystemInit+0x158>)
 80006da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <SystemInit+0x134>)
 80006e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006e6:	4a07      	ldr	r2, [pc, #28]	@ (8000704 <SystemInit+0x134>)
 80006e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	52002000 	.word	0x52002000
 8000704:	58024400 	.word	0x58024400
 8000708:	eaf6ed7f 	.word	0xeaf6ed7f
 800070c:	02020200 	.word	0x02020200
 8000710:	01ff0000 	.word	0x01ff0000
 8000714:	01010280 	.word	0x01010280
 8000718:	580000c0 	.word	0x580000c0
 800071c:	5c001000 	.word	0x5c001000
 8000720:	ffff0000 	.word	0xffff0000
 8000724:	51008108 	.word	0x51008108
 8000728:	52004000 	.word	0x52004000

0800072c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <ExitRun0Mode+0x2c>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <ExitRun0Mode+0x2c>)
 8000736:	f023 0302 	bic.w	r3, r3, #2
 800073a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800073c:	bf00      	nop
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <ExitRun0Mode+0x2c>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	58024800 	.word	0x58024800

0800075c <EvanRTOS_Init>:
 * The user should create this function, and call it before the forever loop in the main function.
 *
 * This funtion never returns, as it passes control over to EvanRTOS.
 *
 */
void EvanRTOS_Init(){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af02      	add	r7, sp, #8

	sem1 = EOS_SemaphoreNew(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 feb7 	bl	80014d6 <EOS_SemaphoreNew>
 8000768:	4603      	mov	r3, r0
 800076a:	4a31      	ldr	r2, [pc, #196]	@ (8000830 <EvanRTOS_Init+0xd4>)
 800076c:	6013      	str	r3, [r2, #0]


	queue1 = EOS_QueueCreate(16, sizeof(uint8_t)); //create a queue that holds 16 byte-sized objects
 800076e:	2101      	movs	r1, #1
 8000770:	2010      	movs	r0, #16
 8000772:	f000 fd81 	bl	8001278 <EOS_QueueCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a2e      	ldr	r2, [pc, #184]	@ (8000834 <EvanRTOS_Init+0xd8>)
 800077a:	6013      	str	r3, [r2, #0]
	queue2 = EOS_QueueCreate(8, sizeof(uint32_t)); //creates a queue that holds 16 word-sized objects
 800077c:	2104      	movs	r1, #4
 800077e:	2008      	movs	r0, #8
 8000780:	f000 fd7a 	bl	8001278 <EOS_QueueCreate>
 8000784:	4603      	mov	r3, r0
 8000786:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <EvanRTOS_Init+0xdc>)
 8000788:	6013      	str	r3, [r2, #0]

	task0_handle = EOS_ThreadNew(task0, task0_priority, task0_stack, 128, EOS_NO_FPU); 				//static task stack allocation
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <EvanRTOS_Init+0xe0>)
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	2304      	movs	r3, #4
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	4a2a      	ldr	r2, [pc, #168]	@ (8000840 <EvanRTOS_Init+0xe4>)
 8000796:	482b      	ldr	r0, [pc, #172]	@ (8000844 <EvanRTOS_Init+0xe8>)
 8000798:	f000 f974 	bl	8000a84 <EOS_ThreadNew>
 800079c:	4603      	mov	r3, r0
 800079e:	4a2a      	ldr	r2, [pc, #168]	@ (8000848 <EvanRTOS_Init+0xec>)
 80007a0:	6013      	str	r3, [r2, #0]
	task1_handle = EOS_ThreadNew(task1, task1_priority, NULL, task1_stack_size, EOS_USE_FPU); 		   //dynamic task stack allocation
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <EvanRTOS_Init+0xf0>)
 80007a4:	7819      	ldrb	r1, [r3, #0]
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <EvanRTOS_Init+0xf4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2203      	movs	r2, #3
 80007ac:	9200      	str	r2, [sp, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4828      	ldr	r0, [pc, #160]	@ (8000854 <EvanRTOS_Init+0xf8>)
 80007b2:	f000 f967 	bl	8000a84 <EOS_ThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <EvanRTOS_Init+0xfc>)
 80007ba:	6013      	str	r3, [r2, #0]
	task2_handle = EOS_ThreadNew(task2, task2_priority, NULL, task2_stack_size, EOS_NO_FPU);
 80007bc:	4b27      	ldr	r3, [pc, #156]	@ (800085c <EvanRTOS_Init+0x100>)
 80007be:	7819      	ldrb	r1, [r3, #0]
 80007c0:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <EvanRTOS_Init+0x104>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2204      	movs	r2, #4
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4826      	ldr	r0, [pc, #152]	@ (8000864 <EvanRTOS_Init+0x108>)
 80007cc:	f000 f95a 	bl	8000a84 <EOS_ThreadNew>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a25      	ldr	r2, [pc, #148]	@ (8000868 <EvanRTOS_Init+0x10c>)
 80007d4:	6013      	str	r3, [r2, #0]
	task3_handle = EOS_ThreadNew(task3, task3_priority, NULL, task3_stack_size, EOS_NO_FPU);
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <EvanRTOS_Init+0x110>)
 80007d8:	7819      	ldrb	r1, [r3, #0]
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <EvanRTOS_Init+0x114>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2204      	movs	r2, #4
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	4823      	ldr	r0, [pc, #140]	@ (8000874 <EvanRTOS_Init+0x118>)
 80007e6:	f000 f94d 	bl	8000a84 <EOS_ThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <EvanRTOS_Init+0x11c>)
 80007ee:	6013      	str	r3, [r2, #0]
	task4_handle = EOS_ThreadNew(task4, task4_priority, NULL, task4_stack_size, EOS_NO_FPU);
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <EvanRTOS_Init+0x120>)
 80007f2:	7819      	ldrb	r1, [r3, #0]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <EvanRTOS_Init+0x124>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2204      	movs	r2, #4
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	4821      	ldr	r0, [pc, #132]	@ (8000884 <EvanRTOS_Init+0x128>)
 8000800:	f000 f940 	bl	8000a84 <EOS_ThreadNew>
 8000804:	4603      	mov	r3, r0
 8000806:	4a20      	ldr	r2, [pc, #128]	@ (8000888 <EvanRTOS_Init+0x12c>)
 8000808:	6013      	str	r3, [r2, #0]
	task5_handle = EOS_ThreadNew(task5, task5_priority, NULL, task5_stack_size, EOS_NO_FPU);
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <EvanRTOS_Init+0x130>)
 800080c:	7819      	ldrb	r1, [r3, #0]
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <EvanRTOS_Init+0x134>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2204      	movs	r2, #4
 8000814:	9200      	str	r2, [sp, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <EvanRTOS_Init+0x138>)
 800081a:	f000 f933 	bl	8000a84 <EOS_ThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a1d      	ldr	r2, [pc, #116]	@ (8000898 <EvanRTOS_Init+0x13c>)
 8000822:	6013      	str	r3, [r2, #0]

	EOS_Init(DEFAULT_TASK_PERIOD); //scheduler preempts every 1 ms
 8000824:	2001      	movs	r0, #1
 8000826:	f000 f9c7 	bl	8000bb8 <EOS_Init>


}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	240000c8 	.word	0x240000c8
 8000834:	240000cc 	.word	0x240000cc
 8000838:	240000d0 	.word	0x240000d0
 800083c:	24000008 	.word	0x24000008
 8000840:	240000d8 	.word	0x240000d8
 8000844:	0800089d 	.word	0x0800089d
 8000848:	240000d4 	.word	0x240000d4
 800084c:	24000009 	.word	0x24000009
 8000850:	2400000c 	.word	0x2400000c
 8000854:	08000919 	.word	0x08000919
 8000858:	240002d8 	.word	0x240002d8
 800085c:	24000010 	.word	0x24000010
 8000860:	24000014 	.word	0x24000014
 8000864:	08000989 	.word	0x08000989
 8000868:	240002dc 	.word	0x240002dc
 800086c:	24000018 	.word	0x24000018
 8000870:	2400001c 	.word	0x2400001c
 8000874:	080009c1 	.word	0x080009c1
 8000878:	240002e0 	.word	0x240002e0
 800087c:	24000020 	.word	0x24000020
 8000880:	24000024 	.word	0x24000024
 8000884:	08000a11 	.word	0x08000a11
 8000888:	240002e4 	.word	0x240002e4
 800088c:	24000028 	.word	0x24000028
 8000890:	2400002c 	.word	0x2400002c
 8000894:	08000a51 	.word	0x08000a51
 8000898:	240002e8 	.word	0x240002e8

0800089c <task0>:

void task0(){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

	while(1)
	{

		EOS_SemaphoreAcquire(sem1);
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <task0+0x70>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fdd2 	bl	8001450 <EOS_SemaphoreAcquire>
		for (int i = 0; i < 10; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	e00b      	b.n	80008ca <task0+0x2e>
		{
			t0count++;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <task0+0x74>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <task0+0x74>)
 80008ba:	6013      	str	r3, [r2, #0]
			EOS_Delay(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c0:	f000 fa5c 	bl	8000d7c <EOS_Delay>
		for (int i = 0; i < 10; i++)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	ddf0      	ble.n	80008b2 <task0+0x16>
		}

		EOS_SemaphoreRelease(sem1);
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <task0+0x70>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fddf 	bl	8001498 <EOS_SemaphoreRelease>

		int value = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
		EOS_QueueGet(queue1, &value, EOS_BLOCK);
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <task0+0x78>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4639      	mov	r1, r7
 80008e4:	2201      	movs	r2, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fcfe 	bl	80012e8 <EOS_QueueGet>
		t0count += value*10;
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <task0+0x74>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <task0+0x74>)
 8000900:	6013      	str	r3, [r2, #0]
		EOS_Delay(1000);
 8000902:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000906:	f000 fa39 	bl	8000d7c <EOS_Delay>
	{
 800090a:	e7ca      	b.n	80008a2 <task0+0x6>
 800090c:	240000c8 	.word	0x240000c8
 8000910:	240002ec 	.word	0x240002ec
 8000914:	240000cc 	.word	0x240000cc

08000918 <task1>:
	}

}


void task1(){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

	while(1)
	{
		EOS_SemaphoreAcquire(sem1);
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <task1+0x68>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fd94 	bl	8001450 <EOS_SemaphoreAcquire>
		for(int i =0; i < 5; i++)
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	e015      	b.n	800095a <task1+0x42>
		{
			t1count += 1.00000423*t1count;
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <task1+0x6c>)
 8000930:	ed93 7b00 	vldr	d7, [r3]
 8000934:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000978 <task1+0x60>
 8000938:	ee27 6b06 	vmul.f64	d6, d7, d6
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <task1+0x6c>)
 800093e:	ed93 7b00 	vldr	d7, [r3]
 8000942:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <task1+0x6c>)
 8000948:	ed83 7b00 	vstr	d7, [r3]
			EOS_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000950:	f000 fa14 	bl	8000d7c <EOS_Delay>
		for(int i =0; i < 5; i++)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3301      	adds	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b04      	cmp	r3, #4
 800095e:	dde6      	ble.n	800092e <task1+0x16>
		}

		EOS_SemaphoreRelease(sem1);
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <task1+0x68>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fd97 	bl	8001498 <EOS_SemaphoreRelease>
		EOS_Delay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800096e:	f000 fa05 	bl	8000d7c <EOS_Delay>
		EOS_SemaphoreAcquire(sem1);
 8000972:	e7d4      	b.n	800091e <task1+0x6>
 8000974:	f3af 8000 	nop.w
 8000978:	6f7b62f8 	.word	0x6f7b62f8
 800097c:	3ff00004 	.word	0x3ff00004
 8000980:	240000c8 	.word	0x240000c8
 8000984:	24000030 	.word	0x24000030

08000988 <task2>:
	}
}

void task2(){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

	while(1){
		uint8_t value = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	71fb      	strb	r3, [r7, #7]
		EOS_QueuePut(queue1, &value, EOS_BLOCK);
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <task2+0x30>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1df9      	adds	r1, r7, #7
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fcfc 	bl	8001398 <EOS_QueuePut>
		t2count++;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <task2+0x34>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <task2+0x34>)
 80009a8:	6013      	str	r3, [r2, #0]
		EOS_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ae:	f000 f9e5 	bl	8000d7c <EOS_Delay>
	while(1){
 80009b2:	bf00      	nop
 80009b4:	e7eb      	b.n	800098e <task2+0x6>
 80009b6:	bf00      	nop
 80009b8:	240000cc 	.word	0x240000cc
 80009bc:	240002f0 	.word	0x240002f0

080009c0 <task3>:
	}
}

void task3(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

	while(1){
		EOS_Pause(task4_handle);
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <task3+0x48>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f9f4 	bl	8000db8 <EOS_Pause>

		for(int i = 0; i < 10; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	e00a      	b.n	80009ec <task3+0x2c>
		{
			t3count++;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <task3+0x4c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <task3+0x4c>)
 80009de:	6013      	str	r3, [r2, #0]
			EOS_Delay(250);
 80009e0:	20fa      	movs	r0, #250	@ 0xfa
 80009e2:	f000 f9cb 	bl	8000d7c <EOS_Delay>
		for(int i = 0; i < 10; i++)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	ddf1      	ble.n	80009d6 <task3+0x16>
		}
		EOS_Resume(task4_handle);
 80009f2:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <task3+0x48>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fa04 	bl	8000e04 <EOS_Resume>
		EOS_Delay(5000);
 80009fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a00:	f000 f9bc 	bl	8000d7c <EOS_Delay>
		EOS_Pause(task4_handle);
 8000a04:	e7df      	b.n	80009c6 <task3+0x6>
 8000a06:	bf00      	nop
 8000a08:	240002e4 	.word	0x240002e4
 8000a0c:	240002f4 	.word	0x240002f4

08000a10 <task4>:
	}
}

void task4(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	while(1)
	{
		static uint32_t count = 0;
		t4count++;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <task4+0x34>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <task4+0x34>)
 8000a1c:	6013      	str	r3, [r2, #0]
		count++;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <task4+0x38>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <task4+0x38>)
 8000a26:	6013      	str	r3, [r2, #0]
		EOS_QueuePut(queue2, &count, EOS_BLOCK);
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <task4+0x3c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <task4+0x38>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fcb1 	bl	8001398 <EOS_QueuePut>
		EOS_Delay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3a:	f000 f99f 	bl	8000d7c <EOS_Delay>
	{
 8000a3e:	bf00      	nop
 8000a40:	e7e8      	b.n	8000a14 <task4+0x4>
 8000a42:	bf00      	nop
 8000a44:	240002f8 	.word	0x240002f8
 8000a48:	24000300 	.word	0x24000300
 8000a4c:	240000d0 	.word	0x240000d0

08000a50 <task5>:

	}
}


void task5(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	while(1)
	{
		uint32_t recent = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
		EOS_QueueGet(queue2, &recent, EOS_BLOCK);
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <task5+0x2c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1d39      	adds	r1, r7, #4
 8000a60:	2201      	movs	r2, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fc40 	bl	80012e8 <EOS_QueueGet>
		t5_queue_item = recent;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <task5+0x30>)
 8000a6c:	6013      	str	r3, [r2, #0]
		EOS_Delay(1000);
 8000a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a72:	f000 f983 	bl	8000d7c <EOS_Delay>
	{
 8000a76:	bf00      	nop
 8000a78:	e7ed      	b.n	8000a56 <task5+0x6>
 8000a7a:	bf00      	nop
 8000a7c:	240000d0 	.word	0x240000d0
 8000a80:	240002fc 	.word	0x240002fc

08000a84 <EOS_ThreadNew>:
 * 			This must be defined by the user.
 *
 * @return A pointer to the newly created task's TCB (as `EOS_task_id_t`), or `EOS_ERROR` on failure.
 *
 */
EOS_task_id_t EOS_ThreadNew(void* function, EOS_priority_t priority, int32_t* task_stack, uint32_t stack_size, EOS_status_t use_fpu){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	460b      	mov	r3, r1
 8000a92:	72fb      	strb	r3, [r7, #11]

	if (stack_size < 64)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a98:	d801      	bhi.n	8000a9e <EOS_ThreadNew+0x1a>
	{
		return EOS_ERROR;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e082      	b.n	8000ba4 <EOS_ThreadNew+0x120>
	}

	if (priority > PRIORITY_HIGH)
 8000a9e:	7afb      	ldrb	r3, [r7, #11]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d901      	bls.n	8000aa8 <EOS_ThreadNew+0x24>
	{
		return EOS_ERROR;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e07d      	b.n	8000ba4 <EOS_ThreadNew+0x120>
	}
	EOS_TCB_t* control_block = (EOS_TCB_t*)malloc(sizeof(EOS_TCB_t));
 8000aa8:	2014      	movs	r0, #20
 8000aaa:	f005 fb97 	bl	80061dc <malloc>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	617b      	str	r3, [r7, #20]

	int32_t* sp;

	if (task_stack == NULL)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d12c      	bne.n	8000b12 <EOS_ThreadNew+0x8e>
	{
		sp = (int32_t*)malloc(stack_size * sizeof(int32_t));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f005 fb8d 	bl	80061dc <malloc>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	61fb      	str	r3, [r7, #28]

		if(sp == NULL)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <EOS_ThreadNew+0x52>
		{
			free(control_block);
 8000acc:	6978      	ldr	r0, [r7, #20]
 8000ace:	f005 fb8d 	bl	80061ec <free>
			return EOS_ERROR;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e066      	b.n	8000ba4 <EOS_ThreadNew+0x120>
		}


		if(use_fpu == EOS_USE_FPU)
 8000ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d10c      	bne.n	8000af8 <EOS_ThreadNew+0x74>
		{
			EOS_InitFpuStack(sp, stack_size, function);
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6839      	ldr	r1, [r7, #0]
 8000ae2:	69f8      	ldr	r0, [r7, #28]
 8000ae4:	f000 fb0a 	bl	80010fc <EOS_InitFpuStack>
			sp = &sp[stack_size - 51];
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <EOS_ThreadNew+0x128>)
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	4413      	add	r3, r2
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	e029      	b.n	8000b4c <EOS_ThreadNew+0xc8>
		}
		else
		{
			EOS_InitStack(sp, stack_size, function);
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	69f8      	ldr	r0, [r7, #28]
 8000afe:	f000 fa2d 	bl	8000f5c <EOS_InitStack>
			sp = &sp[stack_size - 17];
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb0 <EOS_ThreadNew+0x12c>)
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	e01c      	b.n	8000b4c <EOS_ThreadNew+0xc8>


	}
	else
	{
		if(use_fpu == EOS_USE_FPU)
 8000b12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d10c      	bne.n	8000b34 <EOS_ThreadNew+0xb0>
		{
			EOS_InitFpuStack(task_stack, stack_size, function);
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 faec 	bl	80010fc <EOS_InitFpuStack>
			sp = &task_stack[stack_size - 51];
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <EOS_ThreadNew+0x128>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e00b      	b.n	8000b4c <EOS_ThreadNew+0xc8>
		}
		else
		{
			EOS_InitStack(task_stack, stack_size, function);
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 fa0f 	bl	8000f5c <EOS_InitStack>
			sp = &task_stack[stack_size - 17];
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <EOS_ThreadNew+0x12c>)
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	61fb      	str	r3, [r7, #28]
		}

	}

	if (control_block == NULL){
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <EOS_ThreadNew+0xd8>
		free(sp);
 8000b52:	69f8      	ldr	r0, [r7, #28]
 8000b54:	f005 fb4a 	bl	80061ec <free>
		return EOS_ERROR;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e023      	b.n	8000ba4 <EOS_ThreadNew+0x120>
	}

	control_block->sp = sp;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	601a      	str	r2, [r3, #0]
	control_block->priority = priority;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	7afa      	ldrb	r2, [r7, #11]
 8000b66:	741a      	strb	r2, [r3, #16]
	control_block->blocked = 0;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
	control_block->timeOut = 0;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
	control_block->paused = 0;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2200      	movs	r2, #0
 8000b78:	745a      	strb	r2, [r3, #17]

	EOS_TCB_t* temp = run_ptr;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <EOS_ThreadNew+0x130>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	61bb      	str	r3, [r7, #24]
	while (temp->next != run_ptr)
 8000b80:	e002      	b.n	8000b88 <EOS_ThreadNew+0x104>
	{
		temp = temp->next;
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
	while (temp->next != run_ptr)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <EOS_ThreadNew+0x130>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d1f6      	bne.n	8000b82 <EOS_ThreadNew+0xfe>
	}

	temp->next = control_block;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	609a      	str	r2, [r3, #8]
	control_block->next = run_ptr;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <EOS_ThreadNew+0x130>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	609a      	str	r2, [r3, #8]


	return control_block;
 8000ba2:	697b      	ldr	r3, [r7, #20]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	3fffffcd 	.word	0x3fffffcd
 8000bb0:	3fffffef 	.word	0x3fffffef
 8000bb4:	24000050 	.word	0x24000050

08000bb8 <EOS_Init>:
 * @brief Initializes the RTOS and starts the scheduler.
 *
 * @param user_task_period The desired task period (in ms) specified by the user. Default is 1ms.
 *
 */
void EOS_Init(uint32_t user_task_period){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	EOS_EnterCritical();
 8000bc0:	f000 f94a 	bl	8000e58 <EOS_EnterCritical>
	scheduler_enable = 1;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <EOS_Init+0x50>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]

	EOS_InitStack(idle_stack, 32, idleTask);
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <EOS_Init+0x54>)
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4810      	ldr	r0, [pc, #64]	@ (8000c10 <EOS_Init+0x58>)
 8000bd0:	f000 f9c4 	bl	8000f5c <EOS_InitStack>


	if (user_task_period != task_period){
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <EOS_Init+0x5c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d002      	beq.n	8000be4 <EOS_Init+0x2c>
		task_period = user_task_period;
 8000bde:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <EOS_Init+0x5c>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000be4:	f3ef 8314 	mrs	r3, CONTROL
 8000be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8000bea:	68bb      	ldr	r3, [r7, #8]
	}

	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk); //enables PSP mode
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f383 8814 	msr	CONTROL, r3
}
 8000bf8:	bf00      	nop


	EOS_Start();
 8000bfa:	f000 f80d 	bl	8000c18 <EOS_Start>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000304 	.word	0x24000304
 8000c0c:	08001271 	.word	0x08001271
 8000c10:	24000308 	.word	0x24000308
 8000c14:	24000038 	.word	0x24000038

08000c18 <EOS_Start>:
 * @return None. This function does not return to the caller.
 */

static __attribute__((naked))void EOS_Start(){

	__asm volatile(
 8000c18:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <EOS_Start+0x24>)
 8000c1a:	6801      	ldr	r1, [r0, #0]
 8000c1c:	f8d1 d000 	ldr.w	sp, [r1]
 8000c20:	b001      	add	sp, #4
 8000c22:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c26:	bc0f      	pop	{r0, r1, r2, r3}
 8000c28:	f85d cb04 	ldr.w	ip, [sp], #4
 8000c2c:	b001      	add	sp, #4
 8000c2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c32:	b001      	add	sp, #4
 8000c34:	b662      	cpsie	i
 8000c36:	4770      	bx	lr
			"POP {LR}              \n"
			"ADD SP, SP, #4        \n"
			"CPSIE I               \n"
			"BX LR                 \n"
		);
}
 8000c38:	bf00      	nop
 8000c3a:	0000      	.short	0x0000
 8000c3c:	24000050 	.word	0x24000050

08000c40 <EOS_scheduler>:
 *
 * The highest, unblocked task will run. Two tasks of equal priority running will timesplice, so that they both get
 * equal running time. If there are no unblocked tasks, the idle task will run.
 */
static void EOS_scheduler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0

	EOS_TCB_t* current_ptr = run_ptr->next;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	60fb      	str	r3, [r7, #12]
	EOS_TCB_t* start_ptr = run_ptr;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	60bb      	str	r3, [r7, #8]
    if (run_ptr->blocked != 0 || run_ptr->paused != 0)
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d104      	bne.n	8000c68 <EOS_scheduler+0x28>
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	7c5b      	ldrb	r3, [r3, #17]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <EOS_scheduler+0x32>
    {
    	start_ptr = &idle_task;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <EOS_scheduler+0x80>)
 8000c6a:	60bb      	str	r3, [r7, #8]
    	current_ptr = start_ptr->next;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	60fb      	str	r3, [r7, #12]
    }

    EOS_TCB_t* best_pointer = start_ptr;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	607b      	str	r3, [r7, #4]
	while (current_ptr != run_ptr){
 8000c76:	e012      	b.n	8000c9e <EOS_scheduler+0x5e>
		if (current_ptr->blocked == 0 && current_ptr->paused == 0 && current_ptr->priority >= best_pointer->priority){
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10b      	bne.n	8000c98 <EOS_scheduler+0x58>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	7c5b      	ldrb	r3, [r3, #17]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d107      	bne.n	8000c98 <EOS_scheduler+0x58>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	7c1a      	ldrb	r2, [r3, #16]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7c1b      	ldrb	r3, [r3, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d301      	bcc.n	8000c98 <EOS_scheduler+0x58>
			best_pointer = current_ptr;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	607b      	str	r3, [r7, #4]
		}
		current_ptr = current_ptr->next;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	60fb      	str	r3, [r7, #12]
	while (current_ptr != run_ptr){
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d1e7      	bne.n	8000c78 <EOS_scheduler+0x38>
	}
	run_ptr = best_pointer;
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <EOS_scheduler+0x7c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]

	return;
 8000cae:	bf00      	nop
}
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	24000050 	.word	0x24000050
 8000cc0:	2400003c 	.word	0x2400003c
	...

08000cd0 <PendSV_Handler>:
 * This function draws inspiration from the FreeRTOS Kernel PendSV_Handler, and shares some similarities.
 * Credit here:	https://github.com/FreeRTOS/FreeRTOS-Kernel.
 */
__attribute__((naked))void PendSV_Handler(void)
{
	 __asm volatile (
 8000cd0:	b672      	cpsid	i
 8000cd2:	f3ef 8209 	mrs	r2, PSP
 8000cd6:	f01e 0f10 	tst.w	lr, #16
 8000cda:	bf08      	it	eq
 8000cdc:	ed22 8a10 	vstmdbeq	r2!, {s16-s31}
 8000ce0:	e922 0ff0 	stmdb	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ce4:	f842 ed04 	str.w	lr, [r2, #-4]!
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <PendSV_Handler+0x54>)
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	600a      	str	r2, [r1, #0]
 8000cee:	f84d 0d04 	str.w	r0, [sp, #-4]!
 8000cf2:	f7ff ffa5 	bl	8000c40 <EOS_scheduler>
 8000cf6:	bc01      	pop	{r0}
 8000cf8:	6801      	ldr	r1, [r0, #0]
 8000cfa:	680a      	ldr	r2, [r1, #0]
 8000cfc:	f852 eb04 	ldr.w	lr, [r2], #4
 8000d00:	e8b2 0ff0 	ldmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d04:	f01e 0f10 	tst.w	lr, #16
 8000d08:	bf08      	it	eq
 8000d0a:	ecb2 8a10 	vldmiaeq	r2!, {s16-s31}
 8000d0e:	f382 8809 	msr	PSP, r2
 8000d12:	b662      	cpsie	i
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	f3af 8000 	nop.w
 8000d1c:	f3af 8000 	nop.w
	        "MSR PSP, R2\n"
	        "CPSIE I\n"
	        "BX LR\n"
	        ".align 4\n"
	    );
}
 8000d20:	bf00      	nop
 8000d22:	0000      	.short	0x0000
 8000d24:	24000050 	.word	0x24000050

08000d28 <SysTick_Handler>:
 *
 * @note HAL initalizes the systick to run at 1 ms intervals based off the clock speed of the processor.
 * If you are not using HAL, please do this yourself otherwise certain EvanRTOS features (ie EOS_Delay()) will not work.
 */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	EOS_EnterCritical();
 8000d2c:	f000 f894 	bl	8000e58 <EOS_EnterCritical>
	static uint32_t eos_tickCounter = 0;
	HAL_IncTick();
 8000d30:	f000 ff5a 	bl	8001be8 <HAL_IncTick>

	eos_tickCounter++;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <SysTick_Handler+0x44>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <SysTick_Handler+0x44>)
 8000d3c:	6013      	str	r3, [r2, #0]

	if (eos_tickCounter >= task_period && scheduler_enable == 1)
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <SysTick_Handler+0x44>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <SysTick_Handler+0x48>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d30c      	bcc.n	8000d64 <SysTick_Handler+0x3c>
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <SysTick_Handler+0x4c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <SysTick_Handler+0x3c>
	{
		eos_tickCounter = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SysTick_Handler+0x44>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		EOS_HandleTimeout();
 8000d58:	f000 f8cc 	bl	8000ef4 <EOS_HandleTimeout>
  		SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SysTick_Handler+0x50>)
 8000d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d62:	605a      	str	r2, [r3, #4]
  	}

	EOS_ExitCritical();
 8000d64:	f000 f881 	bl	8000e6a <EOS_ExitCritical>

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000388 	.word	0x24000388
 8000d70:	24000038 	.word	0x24000038
 8000d74:	24000304 	.word	0x24000304
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <EOS_Delay>:
 *                If the period is 0, the timeout will be 1ms.
 *
 * @return None.
 *
 */
void EOS_Delay(uint32_t timeout){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	EOS_EnterCritical();
 8000d84:	f000 f868 	bl	8000e58 <EOS_EnterCritical>
	if (timeout == 0){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <EOS_Delay+0x16>
		timeout = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
	}
	run_ptr->blocked = EOS_TIMED_OUT;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <EOS_Delay+0x38>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
	run_ptr->timeOut = timeout;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <EOS_Delay+0x38>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]
	EOS_ExitCritical();
 8000da2:	f000 f862 	bl	8000e6a <EOS_ExitCritical>
	EOS_Suspend();
 8000da6:	f000 f849 	bl	8000e3c <EOS_Suspend>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000050 	.word	0x24000050

08000db8 <EOS_Pause>:
 *         EOS_ERROR if the task pointer is NULL.
 *
 * This function can be called from an interrupt, the task being paused, or another task.
 */
EOS_status_t EOS_Pause(EOS_task_id_t task)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	EOS_EnterCritical();
 8000dc0:	f000 f84a 	bl	8000e58 <EOS_EnterCritical>

	if (task == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <EOS_Pause+0x16>
	{
		return EOS_ERROR;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e014      	b.n	8000df8 <EOS_Pause+0x40>
	}

	if(task->paused != 0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7c5b      	ldrb	r3, [r3, #17]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <EOS_Pause+0x22>
	{
		return EOS_ERROR;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e00e      	b.n	8000df8 <EOS_Pause+0x40>
	}

	task->paused = EOS_PAUSED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	745a      	strb	r2, [r3, #17]

	if (task == run_ptr)
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <EOS_Pause+0x48>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d103      	bne.n	8000df2 <EOS_Pause+0x3a>
	{
		EOS_ExitCritical();
 8000dea:	f000 f83e 	bl	8000e6a <EOS_ExitCritical>
		EOS_Suspend();
 8000dee:	f000 f825 	bl	8000e3c <EOS_Suspend>
	}

	EOS_ExitCritical();
 8000df2:	f000 f83a 	bl	8000e6a <EOS_ExitCritical>
	return EOS_OK;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000050 	.word	0x24000050

08000e04 <EOS_Resume>:
 *
 * @note A task must be resumed by another task or an interrupt.
 * 		 The paused state is different from the blocked state.
 */
EOS_status_t EOS_Resume(EOS_task_id_t task)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	EOS_EnterCritical();
 8000e0c:	f000 f824 	bl	8000e58 <EOS_EnterCritical>

	if (task == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <EOS_Resume+0x16>
	{
		return EOS_ERROR;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e00b      	b.n	8000e32 <EOS_Resume+0x2e>
	}

	if (task->paused != EOS_PAUSED)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7c5b      	ldrb	r3, [r3, #17]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d001      	beq.n	8000e26 <EOS_Resume+0x22>
	{
		return EOS_ERROR;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e005      	b.n	8000e32 <EOS_Resume+0x2e>
	}

	task->paused = 0;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	745a      	strb	r2, [r3, #17]
	EOS_ExitCritical();
 8000e2c:	f000 f81d 	bl	8000e6a <EOS_ExitCritical>
	return EOS_OK;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <EOS_Suspend>:


/**
 * @brief Triggers the PendSV interrupt to handle context switching
 */
void EOS_Suspend(){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <EOS_Suspend+0x18>)
 8000e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e46:	605a      	str	r2, [r3, #4]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <EOS_EnterCritical>:


/**
 * @brief Disables interrupts to allow for critical sections to be run without worry of a context switch.
 */
void EOS_EnterCritical(){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
	__disable_irq();
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <EOS_ExitCritical>:


/**
 * @brief Enables interrupts after critical section code has finished running.
 */
void EOS_ExitCritical(){
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000e6e:	b662      	cpsie	i
}
 8000e70:	bf00      	nop
	__enable_irq();
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <EOS_TaskUnblock>:
 * 			If the priority of the task is higher than the current running task, it calls the scheduler.
 *
 * @param item Pointer to the resource (queue or semaphore) on which tasks may be blocked.
 *             The function uses a `void*` to allow handling of multiple types of synchronization primitives.
 */
void EOS_TaskUnblock(void* item){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    EOS_TCB_t* tmp_ptr = run_ptr->next;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <EOS_TaskUnblock+0x74>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	617b      	str	r3, [r7, #20]
    EOS_TCB_t* start_ptr = run_ptr;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <EOS_TaskUnblock+0x74>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
    EOS_TCB_t* best_ptr = NULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]

    do
    {
    	if (tmp_ptr->blocked == item)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10a      	bne.n	8000eb6 <EOS_TaskUnblock+0x3a>
    	{
            if (best_ptr == NULL || tmp_ptr->priority > best_ptr->priority)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <EOS_TaskUnblock+0x36>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	7c1a      	ldrb	r2, [r3, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d901      	bls.n	8000eb6 <EOS_TaskUnblock+0x3a>
            {
                best_ptr = tmp_ptr;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
            }
        }

        tmp_ptr = tmp_ptr->next;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	617b      	str	r3, [r7, #20]

    } while (tmp_ptr != start_ptr);
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d1e8      	bne.n	8000e96 <EOS_TaskUnblock+0x1a>

    if (best_ptr != NULL)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00d      	beq.n	8000ee6 <EOS_TaskUnblock+0x6a>
    {
        best_ptr->blocked = 0;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]

        if (best_ptr->priority > run_ptr->priority)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	7c1a      	ldrb	r2, [r3, #16]
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <EOS_TaskUnblock+0x74>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	7c1b      	ldrb	r3, [r3, #16]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d903      	bls.n	8000ee6 <EOS_TaskUnblock+0x6a>
        {
            EOS_ExitCritical();
 8000ede:	f7ff ffc4 	bl	8000e6a <EOS_ExitCritical>
            EOS_Suspend();
 8000ee2:	f7ff ffab 	bl	8000e3c <EOS_Suspend>
        }
    }
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	24000050 	.word	0x24000050

08000ef4 <EOS_HandleTimeout>:

/**
 * @brief Handles task timeouts and unblocks tasks whose timeouts have expired.
 */
static void EOS_HandleTimeout(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
	EOS_TCB_t* head = run_ptr;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <EOS_HandleTimeout+0x64>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	603b      	str	r3, [r7, #0]
	EOS_TCB_t* current = run_ptr->next;
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <EOS_HandleTimeout+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	607b      	str	r3, [r7, #4]

	 while (current != head)
 8000f08:	e01a      	b.n	8000f40 <EOS_HandleTimeout+0x4c>
	 {
		 if (current->blocked == EOS_TIMED_OUT && current->paused == 0)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d113      	bne.n	8000f3a <EOS_HandleTimeout+0x46>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7c5b      	ldrb	r3, [r3, #17]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10f      	bne.n	8000f3a <EOS_HandleTimeout+0x46>
		 {
			 if (current->timeOut > 0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <EOS_HandleTimeout+0x46>
			 {
				 current->timeOut--;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]

				 if (current->timeOut == 0)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <EOS_HandleTimeout+0x46>
				 {
					 current->blocked = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
				 }
			 }
		 }
		  current = current->next;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	607b      	str	r3, [r7, #4]
	 while (current != head)
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d1e0      	bne.n	8000f0a <EOS_HandleTimeout+0x16>
	  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	24000050 	.word	0x24000050

08000f5c <EOS_InitStack>:
 * @param task_stack Pointer to the base of the task's stack memory
 * @param stack_size Size of the stack in 32-bit words.
 * @param function   Pointer to the task's function.
 *
 */
static void EOS_InitStack(int32_t* task_stack, uint32_t stack_size, void* function){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]

	task_stack[stack_size-1] = 0x01000000;  //xpsr
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f7a:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-2] = (int32_t)function; //pc
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	4b43      	ldr	r3, [pc, #268]	@ (800108c <EOS_InitStack+0x130>)
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-3] = 0xFFFFFFFD; 	//lr
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <EOS_InitStack+0x134>)
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	f06f 0202 	mvn.w	r2, #2
 8000f9c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-4] = 0xDEADBEEA;  //r12
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8001094 <EOS_InitStack+0x138>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a3b      	ldr	r2, [pc, #236]	@ (8001098 <EOS_InitStack+0x13c>)
 8000fac:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-5] = 0xDEADBEEB;  //r3
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800109c <EOS_InitStack+0x140>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a39      	ldr	r2, [pc, #228]	@ (80010a0 <EOS_InitStack+0x144>)
 8000fbc:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-6] = 0xDEADBEEC;  //r2
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <EOS_InitStack+0x148>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a37      	ldr	r2, [pc, #220]	@ (80010a8 <EOS_InitStack+0x14c>)
 8000fcc:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-7] = 0xDEADBEED;	//r1
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <EOS_InitStack+0x150>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a35      	ldr	r2, [pc, #212]	@ (80010b0 <EOS_InitStack+0x154>)
 8000fdc:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-8] = 0xDEADBEEF;	//r0
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <EOS_InitStack+0x158>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a33      	ldr	r2, [pc, #204]	@ (80010b8 <EOS_InitStack+0x15c>)
 8000fec:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-9] = 0xDEADBEEF;	//r11
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	4b32      	ldr	r3, [pc, #200]	@ (80010bc <EOS_InitStack+0x160>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <EOS_InitStack+0x15c>)
 8000ffc:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-10] = 0xDEADBEAA;	//r10
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <EOS_InitStack+0x164>)
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	4a2e      	ldr	r2, [pc, #184]	@ (80010c4 <EOS_InitStack+0x168>)
 800100c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-11] = 0xDEADBEDF; //r9
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <EOS_InitStack+0x16c>)
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <EOS_InitStack+0x170>)
 800101c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-12] = 0xDEADBEBF; //r8
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <EOS_InitStack+0x174>)
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <EOS_InitStack+0x178>)
 800102c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-13] = 0xDEADBECF; //r7
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <EOS_InitStack+0x17c>)
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <EOS_InitStack+0x180>)
 800103c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-14] = 0xDEADBECC; //r6
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <EOS_InitStack+0x184>)
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <EOS_InitStack+0x188>)
 800104c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-15] = 0xDEADBEDD; //r5
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <EOS_InitStack+0x18c>)
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <EOS_InitStack+0x190>)
 800105c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-16] = 0xDEADBAAA; //r4
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <EOS_InitStack+0x194>)
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <EOS_InitStack+0x198>)
 800106c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-17] = 0xFFFFFFFD; //store LR in fixed place for ease of context switching
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <EOS_InitStack+0x19c>)
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	f06f 0202 	mvn.w	r2, #2
 800107e:	601a      	str	r2, [r3, #0]


}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	3ffffffe 	.word	0x3ffffffe
 8001090:	3ffffffd 	.word	0x3ffffffd
 8001094:	3ffffffc 	.word	0x3ffffffc
 8001098:	deadbeea 	.word	0xdeadbeea
 800109c:	3ffffffb 	.word	0x3ffffffb
 80010a0:	deadbeeb 	.word	0xdeadbeeb
 80010a4:	3ffffffa 	.word	0x3ffffffa
 80010a8:	deadbeec 	.word	0xdeadbeec
 80010ac:	3ffffff9 	.word	0x3ffffff9
 80010b0:	deadbeed 	.word	0xdeadbeed
 80010b4:	3ffffff8 	.word	0x3ffffff8
 80010b8:	deadbeef 	.word	0xdeadbeef
 80010bc:	3ffffff7 	.word	0x3ffffff7
 80010c0:	3ffffff6 	.word	0x3ffffff6
 80010c4:	deadbeaa 	.word	0xdeadbeaa
 80010c8:	3ffffff5 	.word	0x3ffffff5
 80010cc:	deadbedf 	.word	0xdeadbedf
 80010d0:	3ffffff4 	.word	0x3ffffff4
 80010d4:	deadbebf 	.word	0xdeadbebf
 80010d8:	3ffffff3 	.word	0x3ffffff3
 80010dc:	deadbecf 	.word	0xdeadbecf
 80010e0:	3ffffff2 	.word	0x3ffffff2
 80010e4:	deadbecc 	.word	0xdeadbecc
 80010e8:	3ffffff1 	.word	0x3ffffff1
 80010ec:	deadbedd 	.word	0xdeadbedd
 80010f0:	3ffffff0 	.word	0x3ffffff0
 80010f4:	deadbaaa 	.word	0xdeadbaaa
 80010f8:	3fffffef 	.word	0x3fffffef

080010fc <EOS_InitFpuStack>:
 * @param task_stack Pointer to the base of the task's stack memory
 * @param stack_size Size of the stack in 32-bit words.
 * @param function   Pointer to the task's function.
 *
 */
static void EOS_InitFpuStack(int32_t* task_stack, uint32_t stack_size, void* function){
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	@ 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	task_stack[stack_size-1] = 0xDEADBEEF;
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	4a47      	ldr	r2, [pc, #284]	@ (8001234 <EOS_InitFpuStack+0x138>)
 8001118:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-2] = 0x00000000; //fpscr
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4b46      	ldr	r3, [pc, #280]	@ (8001238 <EOS_InitFpuStack+0x13c>)
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]

	for(int i = 3; i < 19; i++)
 800112a:	2303      	movs	r3, #3
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e00a      	b.n	8001146 <EOS_InitFpuStack+0x4a>
	{
		task_stack[stack_size-i] = 0x00000000; //S15->S0 fpu registers
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	for(int i = 3; i < 19; i++)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b12      	cmp	r3, #18
 800114a:	ddf1      	ble.n	8001130 <EOS_InitFpuStack+0x34>
	}

	task_stack[stack_size-19] = 0x01000000; //xPSR
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <EOS_InitFpuStack+0x140>)
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800115c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-20] = (int32_t)function;
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <EOS_InitFpuStack+0x144>)
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-21] = 0xFFFFFFED; //lr
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <EOS_InitFpuStack+0x148>)
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	f06f 0212 	mvn.w	r2, #18
 800117e:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-22] = 0xDEADBEEA;  //r12
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <EOS_InitFpuStack+0x14c>)
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	4a2f      	ldr	r2, [pc, #188]	@ (800124c <EOS_InitFpuStack+0x150>)
 800118e:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-23] = 0xDEADBEEB;  //r3
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <EOS_InitFpuStack+0x154>)
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <EOS_InitFpuStack+0x158>)
 800119e:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-24] = 0xDEADBEEC;  //r2
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <EOS_InitFpuStack+0x15c>)
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a2b      	ldr	r2, [pc, #172]	@ (800125c <EOS_InitFpuStack+0x160>)
 80011ae:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-25] = 0xDEADBEED;	//r1
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <EOS_InitFpuStack+0x164>)
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a29      	ldr	r2, [pc, #164]	@ (8001264 <EOS_InitFpuStack+0x168>)
 80011be:	601a      	str	r2, [r3, #0]
	task_stack[stack_size-26] = 0xDEADBEEF;	//r0
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <EOS_InitFpuStack+0x16c>)
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <EOS_InitFpuStack+0x138>)
 80011ce:	601a      	str	r2, [r3, #0]

	for (int i = 27; i < 43; i++)
 80011d0:	231b      	movs	r3, #27
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	e00a      	b.n	80011ec <EOS_InitFpuStack+0xf0>
	{
		task_stack[stack_size - i] = 0x00000000; //S31-s16 fpu registers
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
	for (int i = 27; i < 43; i++)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80011f0:	ddf1      	ble.n	80011d6 <EOS_InitFpuStack+0xda>
	}
	for(int i = 43; i < 51; i++)
 80011f2:	232b      	movs	r3, #43	@ 0x2b
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e00a      	b.n	800120e <EOS_InitFpuStack+0x112>
	{
		task_stack[stack_size-i] = 0xDEADBEEF; //r11-r4
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	4a0b      	ldr	r2, [pc, #44]	@ (8001234 <EOS_InitFpuStack+0x138>)
 8001206:	601a      	str	r2, [r3, #0]
	for(int i = 43; i < 51; i++)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b32      	cmp	r3, #50	@ 0x32
 8001212:	ddf1      	ble.n	80011f8 <EOS_InitFpuStack+0xfc>
	}

	task_stack[stack_size-51] = 0xFFFFFFED; //store LR in fixed place for ease of context switching
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <EOS_InitFpuStack+0x170>)
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	f06f 0212 	mvn.w	r2, #18
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	deadbeef 	.word	0xdeadbeef
 8001238:	3ffffffe 	.word	0x3ffffffe
 800123c:	3fffffed 	.word	0x3fffffed
 8001240:	3fffffec 	.word	0x3fffffec
 8001244:	3fffffeb 	.word	0x3fffffeb
 8001248:	3fffffea 	.word	0x3fffffea
 800124c:	deadbeea 	.word	0xdeadbeea
 8001250:	3fffffe9 	.word	0x3fffffe9
 8001254:	deadbeeb 	.word	0xdeadbeeb
 8001258:	3fffffe8 	.word	0x3fffffe8
 800125c:	deadbeec 	.word	0xdeadbeec
 8001260:	3fffffe7 	.word	0x3fffffe7
 8001264:	deadbeed 	.word	0xdeadbeed
 8001268:	3fffffe6 	.word	0x3fffffe6
 800126c:	3fffffcd 	.word	0x3fffffcd

08001270 <idleTask>:


/*	IDLE TASK	*/
void idleTask(){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

	while(1){
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <idleTask+0x4>

08001278 <EOS_QueueCreate>:
 *
 * @param size The max number of items the queue can hold
 * @param item_size The size of each item in the queue, in bytes
 * @return ID of queue
 */
EOS_queue_id_t EOS_QueueCreate(uint32_t size, uint32_t item_size){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

	EOS_queue_t *queue = (EOS_queue_t *)malloc(sizeof(EOS_queue_t));
 8001282:	2018      	movs	r0, #24
 8001284:	f004 ffaa 	bl	80061dc <malloc>
 8001288:	4603      	mov	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]
	    if (queue == NULL)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <EOS_QueueCreate+0x1e>
	    {
	        return NULL;
 8001292:	2300      	movs	r3, #0
 8001294:	e023      	b.n	80012de <EOS_QueueCreate+0x66>
	    }
	queue->buffer = malloc(item_size * size);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 ff9c 	bl	80061dc <malloc>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	601a      	str	r2, [r3, #0]

	if (queue->buffer == NULL)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d104      	bne.n	80012be <EOS_QueueCreate+0x46>
	{
		free(queue);
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f004 ff99 	bl	80061ec <free>
		return NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e00f      	b.n	80012de <EOS_QueueCreate+0x66>
	}

	queue->head = 0;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
	queue->tail = 0;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
	queue->size = size;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]
	queue->item_size = item_size;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	611a      	str	r2, [r3, #16]
	queue->count = 0;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
	return queue;
 80012dc:	68fb      	ldr	r3, [r7, #12]

}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <EOS_QueueGet>:
 *                      - `EOS_OK`: Item was successfully retrieved.
 *                      - `EOS_BLOCKED`: Queue is empty, and blocking is disabled.
 *
 * @todo Improve the task unblocking method.
 */
EOS_status_t EOS_QueueGet(EOS_queue_id_t queue, void *item, EOS_block_status_t block){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	71fb      	strb	r3, [r7, #7]

	EOS_EnterCritical();
 80012f6:	f7ff fdaf 	bl	8000e58 <EOS_EnterCritical>

	if (queue->count == 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d11c      	bne.n	800133c <EOS_QueueGet+0x54>
	{
		if(block == EOS_BLOCK)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d115      	bne.n	8001334 <EOS_QueueGet+0x4c>
		{
		run_ptr->blocked = (void *)queue;
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <EOS_QueueGet+0xac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	605a      	str	r2, [r3, #4]
		EOS_ExitCritical();
 8001310:	f7ff fdab 	bl	8000e6a <EOS_ExitCritical>
		EOS_Suspend();
 8001314:	f7ff fd92 	bl	8000e3c <EOS_Suspend>
		EOS_EnterCritical();
 8001318:	f7ff fd9e 	bl	8000e58 <EOS_EnterCritical>

			while (queue->count == 0)
 800131c:	e005      	b.n	800132a <EOS_QueueGet+0x42>
			{
				EOS_ExitCritical();
 800131e:	f7ff fda4 	bl	8000e6a <EOS_ExitCritical>
				EOS_Suspend();
 8001322:	f7ff fd8b 	bl	8000e3c <EOS_Suspend>
				EOS_EnterCritical();
 8001326:	f7ff fd97 	bl	8000e58 <EOS_EnterCritical>
			while (queue->count == 0)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f5      	beq.n	800131e <EOS_QueueGet+0x36>
 8001332:	e003      	b.n	800133c <EOS_QueueGet+0x54>
			}
		}

		else
		{	EOS_ExitCritical();
 8001334:	f7ff fd99 	bl	8000e6a <EOS_ExitCritical>
			return EOS_BLOCKED;
 8001338:	2302      	movs	r3, #2
 800133a:	e027      	b.n	800138c <EOS_QueueGet+0xa4>
		}
	}

	void *src = (uint8_t *)queue->buffer + (queue->head * queue->item_size);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	6909      	ldr	r1, [r1, #16]
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
	memcpy(item, src, queue->item_size);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	461a      	mov	r2, r3
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f005 f841 	bl	80063e0 <memcpy>
	queue->head = (queue->head + 1) % queue->size;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	68d2      	ldr	r2, [r2, #12]
 8001368:	fbb3 f1f2 	udiv	r1, r3, r2
 800136c:	fb01 f202 	mul.w	r2, r1, r2
 8001370:	1a9a      	subs	r2, r3, r2
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	605a      	str	r2, [r3, #4]
	queue->count--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	615a      	str	r2, [r3, #20]

	EOS_TaskUnblock(queue);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff fd7b 	bl	8000e7c <EOS_TaskUnblock>

	EOS_ExitCritical();
 8001386:	f7ff fd70 	bl	8000e6a <EOS_ExitCritical>
	return EOS_OK;
 800138a:	2301      	movs	r3, #1

}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24000050 	.word	0x24000050

08001398 <EOS_QueuePut>:
 *                      - `EOS_OK`: Item was successfully added to the queue.
 *                      - `EOS_BLOCKED`: Queue is full, and blocking is disabled.
 *
 * @todo Improve the task unblocking method.
 */
EOS_status_t EOS_QueuePut(EOS_queue_id_t queue, const void *item, EOS_block_status_t block){
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	4613      	mov	r3, r2
 80013a4:	71fb      	strb	r3, [r7, #7]
	EOS_EnterCritical();
 80013a6:	f7ff fd57 	bl	8000e58 <EOS_EnterCritical>

	if (queue->count == queue->size)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d11e      	bne.n	80013f4 <EOS_QueuePut+0x5c>
	{
		if (block == EOS_BLOCK)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d117      	bne.n	80013ec <EOS_QueuePut+0x54>
		{
			run_ptr->blocked = (void *)queue;
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <EOS_QueuePut+0xb4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
			EOS_ExitCritical();
 80013c4:	f7ff fd51 	bl	8000e6a <EOS_ExitCritical>
			EOS_Suspend();
 80013c8:	f7ff fd38 	bl	8000e3c <EOS_Suspend>
			EOS_EnterCritical();
 80013cc:	f7ff fd44 	bl	8000e58 <EOS_EnterCritical>

			while (queue->count == queue->size)
 80013d0:	e005      	b.n	80013de <EOS_QueuePut+0x46>
			{
				EOS_ExitCritical();
 80013d2:	f7ff fd4a 	bl	8000e6a <EOS_ExitCritical>
				EOS_Suspend();
 80013d6:	f7ff fd31 	bl	8000e3c <EOS_Suspend>
				EOS_EnterCritical();
 80013da:	f7ff fd3d 	bl	8000e58 <EOS_EnterCritical>
			while (queue->count == queue->size)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d0f3      	beq.n	80013d2 <EOS_QueuePut+0x3a>
 80013ea:	e003      	b.n	80013f4 <EOS_QueuePut+0x5c>
			}
		}
		else
		{
			EOS_ExitCritical();
 80013ec:	f7ff fd3d 	bl	8000e6a <EOS_ExitCritical>
			return EOS_BLOCKED;
 80013f0:	2302      	movs	r3, #2
 80013f2:	e027      	b.n	8001444 <EOS_QueuePut+0xac>
		}
	}

	void *dest = (uint8_t *)queue->buffer + (queue->tail * queue->item_size);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	6909      	ldr	r1, [r1, #16]
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
	memcpy(dest, item, queue->item_size);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	461a      	mov	r2, r3
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	6978      	ldr	r0, [r7, #20]
 8001412:	f004 ffe5 	bl	80063e0 <memcpy>
	queue->tail = (queue->tail + 1) % queue->size;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	68d2      	ldr	r2, [r2, #12]
 8001420:	fbb3 f1f2 	udiv	r1, r3, r2
 8001424:	fb01 f202 	mul.w	r2, r1, r2
 8001428:	1a9a      	subs	r2, r3, r2
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	609a      	str	r2, [r3, #8]
	queue->count++;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	615a      	str	r2, [r3, #20]

	EOS_TaskUnblock(queue);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff fd1f 	bl	8000e7c <EOS_TaskUnblock>

	EOS_ExitCritical();
 800143e:	f7ff fd14 	bl	8000e6a <EOS_ExitCritical>
	return EOS_OK;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000050 	.word	0x24000050

08001450 <EOS_SemaphoreAcquire>:
 * @brief Acquires a semaphore, blocking the current task if the semaphore is not free (count is 0)
 *
 * @param semaphore The semaphore to acquire.
 * @return EOS_OK on successful acquisition.
 */
EOS_status_t EOS_SemaphoreAcquire(EOS_semaphore_id_t semaphore) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    EOS_EnterCritical();
 8001458:	f7ff fcfe 	bl	8000e58 <EOS_EnterCritical>

    while (1) {
        if (semaphore->count > 0) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <EOS_SemaphoreAcquire+0x26>
            semaphore->count--;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
            EOS_ExitCritical();
 800146e:	f7ff fcfc 	bl	8000e6a <EOS_ExitCritical>
            return EOS_OK;
 8001472:	2301      	movs	r3, #1
 8001474:	e00a      	b.n	800148c <EOS_SemaphoreAcquire+0x3c>
        } else {
            run_ptr->blocked = semaphore;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <EOS_SemaphoreAcquire+0x44>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	605a      	str	r2, [r3, #4]
            EOS_ExitCritical();
 800147e:	f7ff fcf4 	bl	8000e6a <EOS_ExitCritical>
            EOS_Suspend();
 8001482:	f7ff fcdb 	bl	8000e3c <EOS_Suspend>
            EOS_EnterCritical();
 8001486:	f7ff fce7 	bl	8000e58 <EOS_EnterCritical>
        if (semaphore->count > 0) {
 800148a:	e7e7      	b.n	800145c <EOS_SemaphoreAcquire+0xc>
        }
    }
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24000050 	.word	0x24000050

08001498 <EOS_SemaphoreRelease>:
 * @brief Releases semaphore, and unblocking task waiting on it.
 *
 * @param semaphore The semaphore to release.
 * @return EOS_OK on success, EOS_ERROR if the semaphore is already at its maximum count.
 */
EOS_status_t EOS_SemaphoreRelease(EOS_semaphore_id_t semaphore) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    EOS_EnterCritical();
 80014a0:	f7ff fcda 	bl	8000e58 <EOS_EnterCritical>

    //protect against spamming of EOS_Semaphore Release
    if (semaphore->count >= semaphore->max_count)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d303      	bcc.n	80014b8 <EOS_SemaphoreRelease+0x20>
    {
          EOS_ExitCritical();
 80014b0:	f7ff fcdb 	bl	8000e6a <EOS_ExitCritical>
          return EOS_ERROR;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e00a      	b.n	80014ce <EOS_SemaphoreRelease+0x36>
      }

    semaphore->count++;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	601a      	str	r2, [r3, #0]

    EOS_TaskUnblock(semaphore);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fcda 	bl	8000e7c <EOS_TaskUnblock>

    EOS_ExitCritical();
 80014c8:	f7ff fccf 	bl	8000e6a <EOS_ExitCritical>
    return EOS_OK;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <EOS_SemaphoreNew>:
 * @param count The initial and maximum count of the semaphore.
 * @return A pointer to the newly created semaphore, or NULL if memory allocation fails.
 *
 * @note All EvanRTOS Semaphores are dynamically allocated.
 */
EOS_semaphore_id_t EOS_SemaphoreNew(uint8_t count){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
	EOS_semaphore_t* semaphore = (EOS_semaphore_t *)malloc(sizeof(EOS_semaphore_t));
 80014e0:	2008      	movs	r0, #8
 80014e2:	f004 fe7b 	bl	80061dc <malloc>
 80014e6:	4603      	mov	r3, r0
 80014e8:	60fb      	str	r3, [r7, #12]

	if (semaphore == NULL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <EOS_SemaphoreNew+0x1e>
	{
		return NULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e006      	b.n	8001502 <EOS_SemaphoreNew+0x2c>
	}

	semaphore->count = count;
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]
	semaphore->max_count = count;
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]

	return semaphore;
 8001500:	68fb      	ldr	r3, [r7, #12]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001512:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001516:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001518:	bf00      	nop
 800151a:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <main+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <main+0x24>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	dcf4      	bgt.n	800151a <main+0xe>
  if ( timeout < 0 )
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da01      	bge.n	800153a <main+0x2e>
  {
  Error_Handler();
 8001536:	f000 f9d3 	bl	80018e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153a:	f000 fae3 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153e:	f000 f837 	bl	80015b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001542:	f000 f8bb 	bl	80016bc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <main+0xa0>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <main+0xa0>)
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <main+0xa0>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001564:	2000      	movs	r0, #0
 8001566:	f000 fe19 	bl	800219c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800156a:	2100      	movs	r1, #0
 800156c:	2000      	movs	r0, #0
 800156e:	f000 fe2f 	bl	80021d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001576:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001578:	bf00      	nop
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <main+0xa0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <main+0x84>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	dcf4      	bgt.n	800157a <main+0x6e>
if ( timeout < 0 )
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da01      	bge.n	800159a <main+0x8e>
{
Error_Handler();
 8001596:	f000 f9a3 	bl	80018e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 f90b 	bl	80017b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800159e:	f000 f8bd 	bl	800171c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  EvanRTOS_Init(); //pass control to EvanRTOS
 80015a2:	f7ff f8db 	bl	800075c <EvanRTOS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <main+0x9a>
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b09c      	sub	sp, #112	@ 0x70
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	224c      	movs	r2, #76	@ 0x4c
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 feca 	bl	8006358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2220      	movs	r2, #32
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fec4 	bl	8006358 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015d0:	2004      	movs	r0, #4
 80015d2:	f000 fe11 	bl	80021f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <SystemClock_Config+0x104>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	4a35      	ldr	r2, [pc, #212]	@ (80016b4 <SystemClock_Config+0x104>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <SystemClock_Config+0x104>)
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <SystemClock_Config+0x108>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <SystemClock_Config+0x108>)
 80015f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <SystemClock_Config+0x108>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001608:	bf00      	nop
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <SystemClock_Config+0x108>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001616:	d1f8      	bne.n	800160a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001618:	230b      	movs	r3, #11
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001622:	2301      	movs	r3, #1
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2340      	movs	r3, #64	@ 0x40
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	2302      	movs	r3, #2
 8001634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001636:	2305      	movs	r3, #5
 8001638:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800163a:	2330      	movs	r3, #48	@ 0x30
 800163c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800163e:	2302      	movs	r3, #2
 8001640:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001642:	2305      	movs	r3, #5
 8001644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800164a:	2308      	movs	r3, #8
 800164c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800164e:	2300      	movs	r3, #0
 8001650:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fe26 	bl	80022ac <HAL_RCC_OscConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001666:	f000 f93b 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	233f      	movs	r3, #63	@ 0x3f
 800166c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fa66 	bl	8002b60 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800169a:	f000 f921 	bl	80018e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800169e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016a2:	2100      	movs	r1, #0
 80016a4:	2000      	movs	r0, #0
 80016a6:	f001 fc11 	bl	8002ecc <HAL_RCC_MCOConfig>
}
 80016aa:	bf00      	nop
 80016ac:	3770      	adds	r7, #112	@ 0x70
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	58000400 	.word	0x58000400
 80016b8:	58024800 	.word	0x58024800

080016bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b2      	sub	sp, #200	@ 0xc8
 80016c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	22c8      	movs	r2, #200	@ 0xc8
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fe45 	bl	8006358 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80016de:	230c      	movs	r3, #12
 80016e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016ee:	23c0      	movs	r3, #192	@ 0xc0
 80016f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80016f2:	2320      	movs	r3, #32
 80016f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fe22 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800170e:	f000 f8e7 	bl	80018e0 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	37c8      	adds	r7, #200	@ 0xc8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001722:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <MX_USART1_UART_Init+0x94>)
 8001724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001766:	f003 fc5d 	bl	8005024 <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001770:	f000 f8b6 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 8001778:	f004 fc65 	bl	8006046 <HAL_UARTEx_SetTxFifoThreshold>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001782:	f000 f8ad 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 800178a:	f004 fc9a 	bl	80060c2 <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001794:	f000 f8a4 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_USART1_UART_Init+0x90>)
 800179a:	f004 fc1b 	bl	8005fd4 <HAL_UARTEx_DisableFifoMode>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f000 f89c 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2400038c 	.word	0x2400038c
 80017b0:	40011000 	.word	0x40011000

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	4a3f      	ldr	r2, [pc, #252]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017da:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	4a30      	ldr	r2, [pc, #192]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	4a29      	ldr	r2, [pc, #164]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 800184a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <MX_GPIO_Init+0x11c>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001866:	481b      	ldr	r0, [pc, #108]	@ (80018d4 <MX_GPIO_Init+0x120>)
 8001868:	f000 fc7e 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin JOY_PUSH_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|JOY_PUSH_Pin;
 800186c:	234c      	movs	r3, #76	@ 0x4c
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4815      	ldr	r0, [pc, #84]	@ (80018d8 <MX_GPIO_Init+0x124>)
 8001882:	f000 fac1 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	@ (80018dc <MX_GPIO_Init+0x128>)
 80018a4:	f000 fab0 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <MX_GPIO_Init+0x120>)
 80018c2:	f000 faa1 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58022000 	.word	0x58022000
 80018d8:	58022800 	.word	0x58022800
 80018dc:	58020000 	.word	0x58020000

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <Error_Handler+0x8>

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_MspInit+0x38>)
 80018f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_MspInit+0x38>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_MspInit+0x38>)
 8001904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	210f      	movs	r1, #15
 8001914:	f06f 0001 	mvn.w	r0, #1
 8001918:	f000 fa4f 	bl	8001dba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	58024400 	.word	0x58024400

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0bc      	sub	sp, #240	@ 0xf0
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	22c8      	movs	r2, #200	@ 0xc8
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f004 fd05 	bl	8006358 <memset>
  if(huart->Instance==USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_UART_MspInit+0xc8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d146      	bne.n	80019e6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001958:	f04f 0201 	mov.w	r2, #1
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fcec 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800197a:	f7ff ffb1 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 8001980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001984:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 8001990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_UART_MspInit+0xcc>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80019ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <HAL_UART_MspInit+0xd0>)
 80019e2:	f000 fa11 	bl	8001e08 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019e6:	bf00      	nop
 80019e8:	37f0      	adds	r7, #240	@ 0xf0
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40011000 	.word	0x40011000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58020000 	.word	0x58020000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <NMI_Handler+0x4>

08001a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f004 fc8a 	bl	8006388 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	24080000 	.word	0x24080000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	24000420 	.word	0x24000420
 8001aa8:	24000570 	.word	0x24000570

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ae8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ab0:	f7fe fe3c 	bl	800072c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7fe fd8c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 fc59 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fd13 	bl	800150c <main>
  bx  lr
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001aec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001af0:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 8001af4:	080064f0 	.word	0x080064f0
  ldr r2, =_sbss
 8001af8:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 8001afc:	24000570 	.word	0x24000570

08001b00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC3_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f000 f94a 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b10:	f001 fa46 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_Init+0x68>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	4913      	ldr	r1, [pc, #76]	@ (8001b70 <HAL_Init+0x6c>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_Init+0x68>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <HAL_Init+0x6c>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <HAL_Init+0x70>)
 8001b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b48:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_Init+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	200e      	movs	r0, #14
 8001b50:	f000 f814 	bl	8001b7c <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e002      	b.n	8001b64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5e:	f7ff fec5 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	080064a8 	.word	0x080064a8
 8001b74:	24000004 	.word	0x24000004
 8001b78:	24000000 	.word	0x24000000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_InitTick+0x60>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e021      	b.n	8001bd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_InitTick+0x64>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_InitTick+0x60>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f921 	bl	8001dee <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f8f9 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <HAL_InitTick+0x68>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000058 	.word	0x24000058
 8001be0:	24000000 	.word	0x24000000
 8001be4:	24000054 	.word	0x24000054

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000058 	.word	0x24000058
 8001c0c:	24000424 	.word	0x24000424

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	24000424 	.word	0x24000424

08001c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetREVID+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0c1b      	lsrs	r3, r3, #16
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	5c001000 	.word	0x5c001000

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	05fa0000 	.word	0x05fa0000

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff47 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff5e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffb2 	bl	8001d60 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_GPIO_Init+0x234>)
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e1a:	e194      	b.n	8002146 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8186 	beq.w	8002140 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x44>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	69b9      	ldr	r1, [r7, #24]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80e0 	beq.w	8002140 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b2f      	ldr	r3, [pc, #188]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f86:	4a2e      	ldr	r2, [pc, #184]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <HAL_GPIO_Init+0x23c>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	@ (8002048 <HAL_GPIO_Init+0x240>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d052      	beq.n	8002070 <HAL_GPIO_Init+0x268>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_GPIO_Init+0x244>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_GPIO_Init+0x248>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x22a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_GPIO_Init+0x24c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_GPIO_Init+0x250>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_GPIO_Init+0x254>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8002060 <HAL_GPIO_Init+0x258>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <HAL_GPIO_Init+0x25c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_GPIO_Init+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_GPIO_Init+0x264>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x20e>
 8002012:	2309      	movs	r3, #9
 8002014:	e02d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002016:	230a      	movs	r3, #10
 8002018:	e02b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201a:	2308      	movs	r3, #8
 800201c:	e029      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201e:	2307      	movs	r3, #7
 8002020:	e027      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002022:	2306      	movs	r3, #6
 8002024:	e025      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002026:	2305      	movs	r3, #5
 8002028:	e023      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202a:	2304      	movs	r3, #4
 800202c:	e021      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202e:	2303      	movs	r3, #3
 8002030:	e01f      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002032:	2302      	movs	r3, #2
 8002034:	e01d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002036:	2301      	movs	r3, #1
 8002038:	e01b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800203a:	bf00      	nop
 800203c:	58000080 	.word	0x58000080
 8002040:	58024400 	.word	0x58024400
 8002044:	58000400 	.word	0x58000400
 8002048:	58020000 	.word	0x58020000
 800204c:	58020400 	.word	0x58020400
 8002050:	58020800 	.word	0x58020800
 8002054:	58020c00 	.word	0x58020c00
 8002058:	58021000 	.word	0x58021000
 800205c:	58021400 	.word	0x58021400
 8002060:	58021800 	.word	0x58021800
 8002064:	58021c00 	.word	0x58021c00
 8002068:	58022000 	.word	0x58022000
 800206c:	58022400 	.word	0x58022400
 8002070:	2300      	movs	r3, #0
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4938      	ldr	r1, [pc, #224]	@ (8002164 <HAL_GPIO_Init+0x35c>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae63 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	@ 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	58000400 	.word	0x58000400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021a4:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <HAL_HSEM_FastTake+0x2c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3320      	adds	r3, #32
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_HSEM_FastTake+0x30>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	58026400 	.word	0x58026400
 80021cc:	80000300 	.word	0x80000300

080021d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021da:	4906      	ldr	r1, [pc, #24]	@ (80021f4 <HAL_HSEM_Release+0x24>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58026400 	.word	0x58026400

080021f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002200:	4b29      	ldr	r3, [pc, #164]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	2b06      	cmp	r3, #6
 800220a:	d00a      	beq.n	8002222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800220c:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e040      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e03e      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800222a:	491f      	ldr	r1, [pc, #124]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002232:	f7ff fced 	bl	8001c10 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002238:	e009      	b.n	800224e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800223a:	f7ff fce9 	bl	8001c10 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002248:	d901      	bls.n	800224e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e028      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800225a:	d1ee      	bne.n	800223a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b1e      	cmp	r3, #30
 8002260:	d008      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b2e      	cmp	r3, #46	@ 0x2e
 8002266:	d005      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b1d      	cmp	r3, #29
 800226c:	d002      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b2d      	cmp	r3, #45	@ 0x2d
 8002272:	d114      	bne.n	800229e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002274:	f7ff fccc 	bl	8001c10 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800227a:	e009      	b.n	8002290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800227c:	f7ff fcc8 	bl	8001c10 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800228a:	d901      	bls.n	8002290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e007      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229c:	d1ee      	bne.n	800227c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024800 	.word	0x58024800

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f000 bc48 	b.w	8002b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8088 	beq.w	80023de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b99      	ldr	r3, [pc, #612]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d8:	4b96      	ldr	r3, [pc, #600]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_OscConfig+0x48>
 80022e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e6:	2b18      	cmp	r3, #24
 80022e8:	d111      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d06d      	beq.n	80023dc <HAL_RCC_OscConfig+0x130>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d169      	bne.n	80023dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f000 bc21 	b.w	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x7a>
 8002318:	4b86      	ldr	r3, [pc, #536]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a85      	ldr	r2, [pc, #532]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x9c>
 800232e:	4b81      	ldr	r3, [pc, #516]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a80      	ldr	r2, [pc, #512]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7d      	ldr	r2, [pc, #500]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xc0>
 8002352:	4b78      	ldr	r3, [pc, #480]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a77      	ldr	r2, [pc, #476]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b75      	ldr	r3, [pc, #468]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a74      	ldr	r2, [pc, #464]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 800236c:	4b71      	ldr	r3, [pc, #452]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6d      	ldr	r2, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff fc40 	bl	8001c10 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fc3c 	bl	8001c10 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e3d4      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff fc2c 	bl	8001c10 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fc28 	bl	8001c10 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e3c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ce:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x110>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80ca 	beq.w	8002580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ec:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_RCC_OscConfig+0x166>
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	2b18      	cmp	r3, #24
 8002406:	d156      	bne.n	80024b6 <HAL_RCC_OscConfig+0x20a>
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d151      	bne.n	80024b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002412:	4b48      	ldr	r3, [pc, #288]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e392      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800242a:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0219 	bic.w	r2, r3, #25
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	493f      	ldr	r1, [pc, #252]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff fbe8 	bl	8001c10 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7ff fbe4 	bl	8001c10 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e37c      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002456:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	f7ff fbe1 	bl	8001c28 <HAL_GetREVID>
 8002466:	4603      	mov	r3, r0
 8002468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800246c:	4293      	cmp	r3, r2
 800246e:	d817      	bhi.n	80024a0 <HAL_RCC_OscConfig+0x1f4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b40      	cmp	r3, #64	@ 0x40
 8002476:	d108      	bne.n	800248a <HAL_RCC_OscConfig+0x1de>
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002480:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	e07a      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	031b      	lsls	r3, r3, #12
 8002498:	4926      	ldr	r1, [pc, #152]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249e:	e06f      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	4921      	ldr	r1, [pc, #132]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b4:	e064      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d047      	beq.n	800254e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024be:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0219 	bic.w	r2, r3, #25
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	491a      	ldr	r1, [pc, #104]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fb9e 	bl	8001c10 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7ff fb9a 	bl	8001c10 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e332      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	f7ff fb97 	bl	8001c28 <HAL_GetREVID>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002500:	4293      	cmp	r3, r2
 8002502:	d819      	bhi.n	8002538 <HAL_RCC_OscConfig+0x28c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b40      	cmp	r3, #64	@ 0x40
 800250a:	d108      	bne.n	800251e <HAL_RCC_OscConfig+0x272>
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251a:	6053      	str	r3, [r2, #4]
 800251c:	e030      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	031b      	lsls	r3, r3, #12
 800252c:	4901      	ldr	r1, [pc, #4]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e025      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
 8002534:	58024400 	.word	0x58024400
 8002538:	4b9a      	ldr	r3, [pc, #616]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4997      	ldr	r1, [pc, #604]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b95      	ldr	r3, [pc, #596]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a94      	ldr	r2, [pc, #592]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7ff fb59 	bl	8001c10 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff fb55 	bl	8001c10 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e2ed      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002574:	4b8b      	ldr	r3, [pc, #556]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a9 	beq.w	80026e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	4b85      	ldr	r3, [pc, #532]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002598:	4b82      	ldr	r3, [pc, #520]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d007      	beq.n	80025b4 <HAL_RCC_OscConfig+0x308>
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d13a      	bne.n	8002620 <HAL_RCC_OscConfig+0x374>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d135      	bne.n	8002620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b4:	4b7b      	ldr	r3, [pc, #492]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x320>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b80      	cmp	r3, #128	@ 0x80
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e2c1      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025cc:	f7ff fb2c 	bl	8001c28 <HAL_GetREVID>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d817      	bhi.n	800260a <HAL_RCC_OscConfig+0x35e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_OscConfig+0x348>
 80025e2:	4b70      	ldr	r3, [pc, #448]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025ea:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f2:	e075      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025f4:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	4968      	ldr	r1, [pc, #416]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002608:	e06a      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800260a:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4962      	ldr	r1, [pc, #392]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800261e:	e05f      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d042      	beq.n	80026ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002628:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a5d      	ldr	r2, [pc, #372]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff faec 	bl	8001c10 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800263c:	f7ff fae8 	bl	8001c10 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e280      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264e:	4b55      	ldr	r3, [pc, #340]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265a:	f7ff fae5 	bl	8001c28 <HAL_GetREVID>
 800265e:	4603      	mov	r3, r0
 8002660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002664:	4293      	cmp	r3, r2
 8002666:	d817      	bhi.n	8002698 <HAL_RCC_OscConfig+0x3ec>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2b20      	cmp	r3, #32
 800266e:	d108      	bne.n	8002682 <HAL_RCC_OscConfig+0x3d6>
 8002670:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002678:	4a4a      	ldr	r2, [pc, #296]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800267e:	6053      	str	r3, [r2, #4]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
 8002682:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	4944      	ldr	r1, [pc, #272]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e023      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
 8002698:	4b42      	ldr	r3, [pc, #264]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff faa9 	bl	8001c10 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026c2:	f7ff faa5 	bl	8001c10 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e23d      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d4:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d036      	beq.n	800275a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d019      	beq.n	8002728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f8:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7ff fa86 	bl	8001c10 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7ff fa82 	bl	8001c10 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e21a      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800271a:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x45c>
 8002726:	e018      	b.n	800275a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff fa6c 	bl	8001c10 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff fa68 	bl	8001c10 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e200      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d039      	beq.n	80027da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800277a:	f7ff fa49 	bl	8001c10 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7ff fa45 	bl	8001c10 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1dd      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x4d6>
 80027a0:	e01b      	b.n	80027da <HAL_RCC_OscConfig+0x52e>
 80027a2:	bf00      	nop
 80027a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a9a      	ldr	r2, [pc, #616]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027b4:	f7ff fa2c 	bl	8001c10 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027bc:	f7ff fa28 	bl	8001c10 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ce:	4b92      	ldr	r3, [pc, #584]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8081 	beq.w	80028ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8b      	ldr	r2, [pc, #556]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f4:	f7ff fa0c 	bl	8001c10 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7ff fa08 	bl	8001c10 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1a0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280e:	4b83      	ldr	r3, [pc, #524]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x584>
 8002822:	4b7d      	ldr	r3, [pc, #500]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a7c      	ldr	r2, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	e02d      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x5a6>
 8002838:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a76      	ldr	r2, [pc, #472]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x5c8>
 800285a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	4b6c      	ldr	r3, [pc, #432]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a67      	ldr	r2, [pc, #412]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	4b65      	ldr	r3, [pc, #404]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a64      	ldr	r2, [pc, #400]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7ff f9bc 	bl	8001c10 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff f9b8 	bl	8001c10 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e14e      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028b2:	4b59      	ldr	r3, [pc, #356]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x5f0>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff f9a6 	bl	8001c10 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7ff f9a2 	bl	8001c10 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e138      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028de:	4b4e      	ldr	r3, [pc, #312]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 812d 	beq.w	8002b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028f4:	4b48      	ldr	r3, [pc, #288]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fc:	2b18      	cmp	r3, #24
 80028fe:	f000 80bd 	beq.w	8002a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2b02      	cmp	r3, #2
 8002908:	f040 809e 	bne.w	8002a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a41      	ldr	r2, [pc, #260]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff f97a 	bl	8001c10 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f976 	bl	8001c10 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e10e      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002932:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002942:	4b37      	ldr	r3, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0x774>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	430a      	orrs	r2, r1
 8002952:	4931      	ldr	r1, [pc, #196]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	628b      	str	r3, [r1, #40]	@ 0x28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	3b01      	subs	r3, #1
 800295e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002966:	3b01      	subs	r3, #1
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	b29b      	uxth	r3, r3
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	3b01      	subs	r3, #1
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	3b01      	subs	r3, #1
 8002982:	061b      	lsls	r3, r3, #24
 8002984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002988:	4923      	ldr	r1, [pc, #140]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	4a21      	ldr	r2, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800299a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_RCC_OscConfig+0x778>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029a6:	00d2      	lsls	r2, r2, #3
 80029a8:	491b      	ldr	r1, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	f023 020c 	bic.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4917      	ldr	r1, [pc, #92]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	f023 0202 	bic.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	4912      	ldr	r1, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f8ff 	bl	8001c10 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a14:	e011      	b.n	8002a3a <HAL_RCC_OscConfig+0x78e>
 8002a16:	bf00      	nop
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	58024800 	.word	0x58024800
 8002a20:	fffffc0c 	.word	0xfffffc0c
 8002a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff f8f2 	bl	8001c10 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e08a      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x77c>
 8002a46:	e082      	b.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff f8dc 	bl	8001c10 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7ff f8d8 	bl	8001c10 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e070      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x7b0>
 8002a7a:	e068      	b.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d031      	beq.n	8002af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d12a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d122      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	0a5b      	lsrs	r3, r3, #9
 8002ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e02b      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d01f      	beq.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b1a:	f7ff f879 	bl	8001c10 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b20:	bf00      	nop
 8002b22:	f7ff f875 	bl	8001c10 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d0f9      	beq.n	8002b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_RCC_OscConfig+0x8b0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	@ 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	ffff0007 	.word	0xffff0007

08002b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e19c      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b8a      	ldr	r3, [pc, #552]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b87      	ldr	r3, [pc, #540]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	4985      	ldr	r1, [pc, #532]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b83      	ldr	r3, [pc, #524]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e184      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	4975      	ldr	r1, [pc, #468]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d908      	bls.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	496a      	ldr	r1, [pc, #424]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	4b64      	ldr	r3, [pc, #400]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d908      	bls.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	495e      	ldr	r1, [pc, #376]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d908      	bls.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c4a:	4b56      	ldr	r3, [pc, #344]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4953      	ldr	r1, [pc, #332]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f023 020f 	bic.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4947      	ldr	r1, [pc, #284]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d055      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4940      	ldr	r1, [pc, #256]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0f6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0ea      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce0:	4b30      	ldr	r3, [pc, #192]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0de      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0d6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4925      	ldr	r1, [pc, #148]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe ff7d 	bl	8001c10 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe ff79 	bl	8001c10 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0be      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1eb      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f023 020f 	bic.w	r2, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	490e      	ldr	r1, [pc, #56]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d214      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e086      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
 8002da0:	52002000 	.word	0x52002000
 8002da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d208      	bcs.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4939      	ldr	r1, [pc, #228]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d208      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	492e      	ldr	r1, [pc, #184]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d208      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4922      	ldr	r1, [pc, #136]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4917      	ldr	r1, [pc, #92]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e60:	f000 f89e 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4912      	ldr	r1, [pc, #72]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_RCC_ClockConfig+0x360>)
 8002e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x364>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x368>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fe6a 	bl	8001b7c <HAL_InitTick>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	080064a8 	.word	0x080064a8
 8002ec0:	24000004 	.word	0x24000004
 8002ec4:	24000000 	.word	0x24000000
 8002ec8:	24000054 	.word	0x24000054

08002ecc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	@ 0x30
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12a      	bne.n	8002f34 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	4619      	mov	r1, r3
 8002f18:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <HAL_RCC_MCOConfig+0xcc>)
 8002f1a:	f7fe ff75 	bl	8001e08 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	4919      	ldr	r1, [pc, #100]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002f32:	e02a      	b.n	8002f8a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002f34:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3a:	4a16      	ldr	r2, [pc, #88]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480b      	ldr	r0, [pc, #44]	@ (8002f9c <HAL_RCC_MCOConfig+0xd0>)
 8002f70:	f7fe ff4a 	bl	8001e08 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	01d9      	lsls	r1, r3, #7
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <HAL_RCC_MCOConfig+0xc8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	610b      	str	r3, [r1, #16]
}
 8002f8a:	bf00      	nop
 8002f8c:	3730      	adds	r7, #48	@ 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58020000 	.word	0x58020000
 8002f9c:	58020800 	.word	0x58020800

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa6:	4bb3      	ldr	r3, [pc, #716]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fae:	2b18      	cmp	r3, #24
 8002fb0:	f200 8155 	bhi.w	800325e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08003021 	.word	0x08003021
 8002fc0:	0800325f 	.word	0x0800325f
 8002fc4:	0800325f 	.word	0x0800325f
 8002fc8:	0800325f 	.word	0x0800325f
 8002fcc:	0800325f 	.word	0x0800325f
 8002fd0:	0800325f 	.word	0x0800325f
 8002fd4:	0800325f 	.word	0x0800325f
 8002fd8:	0800325f 	.word	0x0800325f
 8002fdc:	08003047 	.word	0x08003047
 8002fe0:	0800325f 	.word	0x0800325f
 8002fe4:	0800325f 	.word	0x0800325f
 8002fe8:	0800325f 	.word	0x0800325f
 8002fec:	0800325f 	.word	0x0800325f
 8002ff0:	0800325f 	.word	0x0800325f
 8002ff4:	0800325f 	.word	0x0800325f
 8002ff8:	0800325f 	.word	0x0800325f
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800325f 	.word	0x0800325f
 8003004:	0800325f 	.word	0x0800325f
 8003008:	0800325f 	.word	0x0800325f
 800300c:	0800325f 	.word	0x0800325f
 8003010:	0800325f 	.word	0x0800325f
 8003014:	0800325f 	.word	0x0800325f
 8003018:	0800325f 	.word	0x0800325f
 800301c:	08003053 	.word	0x08003053
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003020:	4b94      	ldr	r3, [pc, #592]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800302c:	4b91      	ldr	r3, [pc, #580]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	08db      	lsrs	r3, r3, #3
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	4a90      	ldr	r2, [pc, #576]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800303e:	e111      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003040:	4b8d      	ldr	r3, [pc, #564]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003042:	61bb      	str	r3, [r7, #24]
      break;
 8003044:	e10e      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003046:	4b8d      	ldr	r3, [pc, #564]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003048:	61bb      	str	r3, [r7, #24]
      break;
 800304a:	e10b      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800304e:	61bb      	str	r3, [r7, #24]
      break;
 8003050:	e108      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003052:	4b88      	ldr	r3, [pc, #544]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800305c:	4b85      	ldr	r3, [pc, #532]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003066:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003068:	4b82      	ldr	r3, [pc, #520]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003072:	4b80      	ldr	r3, [pc, #512]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	08db      	lsrs	r3, r3, #3
 8003078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80e1 	beq.w	8003258 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b02      	cmp	r3, #2
 800309a:	f000 8083 	beq.w	80031a4 <HAL_RCC_GetSysClockFreq+0x204>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f200 80a1 	bhi.w	80031e8 <HAL_RCC_GetSysClockFreq+0x248>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x114>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d056      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030b2:	e099      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d02d      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ea:	4b62      	ldr	r3, [pc, #392]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800311a:	e087      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003288 <HAL_RCC_GetSysClockFreq+0x2e8>
 800312a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312e:	4b51      	ldr	r3, [pc, #324]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003142:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800315e:	e065      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2ec>
 800316e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003172:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003182:	ed97 6a02 	vldr	s12, [r7, #8]
 8003186:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e4>
 800318a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a2:	e043      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003290 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e6:	e021      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320a:	ed97 6a02 	vldr	s12, [r7, #8]
 800320e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800321e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800322a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	0a5b      	lsrs	r3, r3, #9
 8003232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003236:	3301      	adds	r3, #1
 8003238:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003244:	edd7 6a07 	vldr	s13, [r7, #28]
 8003248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003250:	ee17 3a90 	vmov	r3, s15
 8003254:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003256:	e005      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
      break;
 800325c:	e002      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003260:	61bb      	str	r3, [r7, #24]
      break;
 8003262:	bf00      	nop
  }

  return sysclockfreq;
 8003264:	69bb      	ldr	r3, [r7, #24]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	58024400 	.word	0x58024400
 8003278:	03d09000 	.word	0x03d09000
 800327c:	003d0900 	.word	0x003d0900
 8003280:	017d7840 	.word	0x017d7840
 8003284:	46000000 	.word	0x46000000
 8003288:	4c742400 	.word	0x4c742400
 800328c:	4a742400 	.word	0x4a742400
 8003290:	4bbebc20 	.word	0x4bbebc20

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800329a:	f7ff fe81 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490f      	ldr	r1, [pc, #60]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032b8:	4b0a      	ldr	r3, [pc, #40]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	4a09      	ldr	r2, [pc, #36]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	4a07      	ldr	r2, [pc, #28]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x58>)
 80032d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032d2:	4a07      	ldr	r2, [pc, #28]	@ (80032f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032d8:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	58024400 	.word	0x58024400
 80032e8:	080064a8 	.word	0x080064a8
 80032ec:	24000004 	.word	0x24000004
 80032f0:	24000000 	.word	0x24000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032f8:	f7ff ffcc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4904      	ldr	r1, [pc, #16]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x28>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	58024400 	.word	0x58024400
 800331c:	080064a8 	.word	0x080064a8

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003324:	f7ff ffb6 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4904      	ldr	r1, [pc, #16]	@ (8003348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	58024400 	.word	0x58024400
 8003348:	080064a8 	.word	0x080064a8

0800334c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003350:	b0cc      	sub	sp, #304	@ 0x130
 8003352:	af00      	add	r7, sp, #0
 8003354:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003358:	2300      	movs	r3, #0
 800335a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800335e:	2300      	movs	r3, #0
 8003360:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003370:	2500      	movs	r5, #0
 8003372:	ea54 0305 	orrs.w	r3, r4, r5
 8003376:	d049      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003378:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800337c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003382:	d02f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003384:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003388:	d828      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800338a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800338e:	d01a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003390:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003394:	d822      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339e:	d007      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033a0:	e01c      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a2:	4bb8      	ldr	r3, [pc, #736]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	4ab7      	ldr	r2, [pc, #732]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ae:	e01a      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b4:	3308      	adds	r3, #8
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fccf 	bl	8004d5c <RCCEx_PLL2_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033c4:	e00f      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ca:	3328      	adds	r3, #40	@ 0x28
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fd76 	bl	8004ec0 <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033da:	e004      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033ee:	4ba5      	ldr	r3, [pc, #660]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fc:	4aa1      	ldr	r2, [pc, #644]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fe:	430b      	orrs	r3, r1
 8003400:	6513      	str	r3, [r2, #80]	@ 0x50
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003408:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003418:	f04f 0900 	mov.w	r9, #0
 800341c:	ea58 0309 	orrs.w	r3, r8, r9
 8003420:	d047      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	2b04      	cmp	r3, #4
 800342a:	d82a      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800342c:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003449 	.word	0x08003449
 8003438:	08003457 	.word	0x08003457
 800343c:	0800346d 	.word	0x0800346d
 8003440:	0800348b 	.word	0x0800348b
 8003444:	0800348b 	.word	0x0800348b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4b8e      	ldr	r3, [pc, #568]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	4a8d      	ldr	r2, [pc, #564]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003454:	e01a      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800345a:	3308      	adds	r3, #8
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fc7c 	bl	8004d5c <RCCEx_PLL2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800346a:	e00f      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800346c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003470:	3328      	adds	r3, #40	@ 0x28
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f001 fd23 	bl	8004ec0 <RCCEx_PLL3_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003480:	e004      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800348a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003494:	4b7b      	ldr	r3, [pc, #492]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	f023 0107 	bic.w	r1, r3, #7
 800349c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	4a78      	ldr	r2, [pc, #480]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034be:	f04f 0b00 	mov.w	fp, #0
 80034c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80034c6:	d04c      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d2:	d030      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d8:	d829      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034da:	2bc0      	cmp	r3, #192	@ 0xc0
 80034dc:	d02d      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034de:	2bc0      	cmp	r3, #192	@ 0xc0
 80034e0:	d825      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d018      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034e6:	2b80      	cmp	r3, #128	@ 0x80
 80034e8:	d821      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034f2:	e01c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4b63      	ldr	r3, [pc, #396]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	4a62      	ldr	r2, [pc, #392]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003500:	e01c      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003506:	3308      	adds	r3, #8
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fc26 	bl	8004d5c <RCCEx_PLL2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003516:	e011      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800351c:	3328      	adds	r3, #40	@ 0x28
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fccd 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003544:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800354c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	4a4c      	ldr	r2, [pc, #304]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003554:	430b      	orrs	r3, r1
 8003556:	6513      	str	r3, [r2, #80]	@ 0x50
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800355e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800356e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003578:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d053      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800358a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800358e:	d035      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003594:	d82e      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003596:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800359a:	d031      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800359c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035a0:	d828      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a6:	d01a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ac:	d822      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035b6:	d007      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035b8:	e01c      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b32      	ldr	r3, [pc, #200]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	4a31      	ldr	r2, [pc, #196]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c6:	e01c      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035cc:	3308      	adds	r3, #8
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 fbc3 	bl	8004d5c <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035dc:	e011      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e2:	3328      	adds	r3, #40	@ 0x28
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fc6a 	bl	8004ec0 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f2:	e006      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035fa:	e002      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003602:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800360a:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003616:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800361a:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003626:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800362a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003636:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003640:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d056      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800364a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800364e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003656:	d038      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800365c:	d831      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800365e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003662:	d034      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003668:	d82b      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800366a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800366e:	d01d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003674:	d825      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800367a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003680:	e01f      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003682:	bf00      	nop
 8003684:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4ba2      	ldr	r3, [pc, #648]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	4aa1      	ldr	r2, [pc, #644]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003694:	e01c      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369a:	3308      	adds	r3, #8
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fb5c 	bl	8004d5c <RCCEx_PLL2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b0:	3328      	adds	r3, #40	@ 0x28
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fc03 	bl	8004ec0 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036e8:	4a8a      	ldr	r2, [pc, #552]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003704:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800370e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d03a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	2b30      	cmp	r3, #48	@ 0x30
 8003720:	d01f      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003722:	2b30      	cmp	r3, #48	@ 0x30
 8003724:	d819      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003726:	2b20      	cmp	r3, #32
 8003728:	d00c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d815      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d019      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003732:	2b10      	cmp	r3, #16
 8003734:	d111      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003736:	4b77      	ldr	r3, [pc, #476]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	4a76      	ldr	r2, [pc, #472]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003744:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003748:	3308      	adds	r3, #8
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fb05 	bl	8004d5c <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003770:	4b68      	ldr	r3, [pc, #416]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	4a65      	ldr	r2, [pc, #404]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003780:	430b      	orrs	r3, r1
 8003782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800378a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800379a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037a4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d051      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b8:	d035      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037be:	d82e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c4:	d031      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037ca:	d828      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d0:	d01a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d6:	d822      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e0:	d007      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037e2:	e01c      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037f0:	e01c      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f6:	3308      	adds	r3, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 faae 	bl	8004d5c <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003806:	e011      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800380c:	3328      	adds	r3, #40	@ 0x28
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fb55 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003824:	e002      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800382a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003834:	4b37      	ldr	r3, [pc, #220]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003838:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800383c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003842:	4a34      	ldr	r2, [pc, #208]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003844:	430b      	orrs	r3, r1
 8003846:	6513      	str	r3, [r2, #80]	@ 0x50
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800384e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800385e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003868:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d056      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387c:	d033      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800387e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003882:	d82c      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003888:	d02f      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800388a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800388e:	d826      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003890:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003894:	d02b      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003896:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800389a:	d820      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800389c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a0:	d012      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a6:	d81a      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b0:	d115      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b6:	3308      	adds	r3, #8
 80038b8:	2101      	movs	r1, #1
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fa4e 	bl	8004d5c <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038c6:	e015      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038cc:	3328      	adds	r3, #40	@ 0x28
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 faf5 	bl	8004ec0 <RCCEx_PLL3_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038dc:	e00a      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038e4:	e006      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038e6:	bf00      	nop
 80038e8:	e004      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10d      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003900:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003904:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390a:	4a02      	ldr	r2, [pc, #8]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390c:	430b      	orrs	r3, r1
 800390e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800391c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800392c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003936:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d055      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800394c:	d033      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003952:	d82c      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003958:	d02f      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395e:	d826      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003964:	d02b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003966:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800396a:	d820      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003970:	d012      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003976:	d81a      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d022      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800397c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003980:	d115      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003986:	3308      	adds	r3, #8
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f001 f9e6 	bl	8004d5c <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003996:	e015      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003998:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800399c:	3328      	adds	r3, #40	@ 0x28
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 fa8d 	bl	8004ec0 <RCCEx_PLL3_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039ac:	e00a      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039b4:	e006      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039b6:	bf00      	nop
 80039b8:	e004      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ba:	bf00      	nop
 80039bc:	e002      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039cc:	4bb6      	ldr	r3, [pc, #728]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039dc:	4ab2      	ldr	r2, [pc, #712]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80039f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d02a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d011      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a20:	3308      	adds	r3, #8
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 f999 	bl	8004d5c <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003a44:	4b98      	ldr	r3, [pc, #608]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a48:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a52:	4a95      	ldr	r2, [pc, #596]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	d037      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a8c:	d00e      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a92:	d816      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a9c:	d111      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9e:	4b82      	ldr	r3, [pc, #520]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	4a81      	ldr	r2, [pc, #516]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003aaa:	e00f      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f951 	bl	8004d5c <RCCEx_PLL2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ad4:	4b74      	ldr	r3, [pc, #464]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	4a71      	ldr	r2, [pc, #452]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003aee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003afe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b08:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d03a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d81d      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b35 	.word	0x08003b35
 8003b2c:	08003b43 	.word	0x08003b43
 8003b30:	08003b61 	.word	0x08003b61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b40:	e00f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b46:	3308      	adds	r3, #8
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f906 	bl	8004d5c <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	f023 0103 	bic.w	r1, r3, #3
 8003b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b7e:	e003      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f000 80a0 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003baa:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3f      	ldr	r2, [pc, #252]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb6:	f7fe f82b 	bl	8001c10 <HAL_GetTick>
 8003bba:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fe f826 	bl	8001c10 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b64      	cmp	r3, #100	@ 0x64
 8003bce:	d903      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd8:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003be4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d17a      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bf8:	4053      	eors	r3, r2
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c02:	4b29      	ldr	r3, [pc, #164]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a25      	ldr	r2, [pc, #148]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c26:	4a20      	ldr	r2, [pc, #128]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c3a:	d118      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ffe8 	bl	8001c10 <HAL_GetTick>
 8003c40:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c44:	e00d      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd ffe3 	bl	8001c10 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d903      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003c60:	e005      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c62:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0eb      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d130      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c86:	d115      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003c88:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c98:	091a      	lsrs	r2, r3, #4
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	4a02      	ldr	r2, [pc, #8]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6113      	str	r3, [r2, #16]
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003ca6:	bf00      	nop
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58024800 	.word	0x58024800
 8003cb0:	00ffffcf 	.word	0x00ffffcf
 8003cb4:	4bd4      	ldr	r3, [pc, #848]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4ad3      	ldr	r2, [pc, #844]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003cba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cbe:	6113      	str	r3, [r2, #16]
 8003cc0:	4bd1      	ldr	r3, [pc, #836]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003cc2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	4acd      	ldr	r2, [pc, #820]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ce6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f002 0301 	and.w	r3, r2, #1
 8003cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f000 808b 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d14:	2b28      	cmp	r3, #40	@ 0x28
 8003d16:	d86b      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003df9 	.word	0x08003df9
 8003d24:	08003df1 	.word	0x08003df1
 8003d28:	08003df1 	.word	0x08003df1
 8003d2c:	08003df1 	.word	0x08003df1
 8003d30:	08003df1 	.word	0x08003df1
 8003d34:	08003df1 	.word	0x08003df1
 8003d38:	08003df1 	.word	0x08003df1
 8003d3c:	08003df1 	.word	0x08003df1
 8003d40:	08003dc5 	.word	0x08003dc5
 8003d44:	08003df1 	.word	0x08003df1
 8003d48:	08003df1 	.word	0x08003df1
 8003d4c:	08003df1 	.word	0x08003df1
 8003d50:	08003df1 	.word	0x08003df1
 8003d54:	08003df1 	.word	0x08003df1
 8003d58:	08003df1 	.word	0x08003df1
 8003d5c:	08003df1 	.word	0x08003df1
 8003d60:	08003ddb 	.word	0x08003ddb
 8003d64:	08003df1 	.word	0x08003df1
 8003d68:	08003df1 	.word	0x08003df1
 8003d6c:	08003df1 	.word	0x08003df1
 8003d70:	08003df1 	.word	0x08003df1
 8003d74:	08003df1 	.word	0x08003df1
 8003d78:	08003df1 	.word	0x08003df1
 8003d7c:	08003df1 	.word	0x08003df1
 8003d80:	08003df9 	.word	0x08003df9
 8003d84:	08003df1 	.word	0x08003df1
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003df1 	.word	0x08003df1
 8003d90:	08003df1 	.word	0x08003df1
 8003d94:	08003df1 	.word	0x08003df1
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003df1 	.word	0x08003df1
 8003dac:	08003df1 	.word	0x08003df1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
 8003db8:	08003df1 	.word	0x08003df1
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003df9 	.word	0x08003df9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc8:	3308      	adds	r3, #8
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 ffc5 	bl	8004d5c <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dd8:	e00f      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dde:	3328      	adds	r3, #40	@ 0x28
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 f86c 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dee:	e004      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e02:	4b81      	ldr	r3, [pc, #516]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	4a7d      	ldr	r2, [pc, #500]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f002 0302 	and.w	r3, r2, #2
 8003e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e38:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	d042      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d825      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003ea1 	.word	0x08003ea1
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e83 	.word	0x08003e83
 8003e60:	08003ea1 	.word	0x08003ea1
 8003e64:	08003ea1 	.word	0x08003ea1
 8003e68:	08003ea1 	.word	0x08003ea1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e70:	3308      	adds	r3, #8
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 ff71 	bl	8004d5c <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e86:	3328      	adds	r3, #40	@ 0x28
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f818 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eaa:	4b57      	ldr	r3, [pc, #348]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	f023 0107 	bic.w	r1, r3, #7
 8003eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb8:	4a53      	ldr	r2, [pc, #332]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ec4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 0304 	and.w	r3, r2, #4
 8003ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ede:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d044      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d825      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f15 	.word	0x08003f15
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f49 	.word	0x08003f49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 ff1d 	bl	8004d5c <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f28:	e00f      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ffc4 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f023 0107 	bic.w	r1, r3, #7
 8003f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f62:	4a29      	ldr	r2, [pc, #164]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f002 0320 	and.w	r3, r2, #32
 8003f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d057      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f9e:	d035      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa4:	d82c      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003faa:	d031      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d826      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003fb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fb6:	d02d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003fb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fbc:	d820      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc2:	d012      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc8:	d81a      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d024      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd2:	d115      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 febd 	bl	8004d5c <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e017      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fee:	3328      	adds	r3, #40	@ 0x28
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 ff64 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e00c      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004006:	e008      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004008:	58024400 	.word	0x58024400
        break;
 800400c:	bf00      	nop
 800400e:	e004      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004022:	4bc2      	ldr	r3, [pc, #776]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800402a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004032:	4abe      	ldr	r2, [pc, #760]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6553      	str	r3, [r2, #84]	@ 0x54
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800403e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004058:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800405c:	460b      	mov	r3, r1
 800405e:	4313      	orrs	r3, r2
 8004060:	d055      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800406a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800406e:	d033      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004070:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004074:	d82c      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407a:	d02f      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d826      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004082:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004086:	d02b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004088:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800408c:	d820      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004092:	d012      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004098:	d81a      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a2:	d115      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a8:	3308      	adds	r3, #8
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe55 	bl	8004d5c <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040be:	3328      	adds	r3, #40	@ 0x28
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fefc 	bl	8004ec0 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040d6:	e006      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ee:	4b8f      	ldr	r3, [pc, #572]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040fe:	4a8b      	ldr	r2, [pc, #556]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004100:	430b      	orrs	r3, r1
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58
 8004104:	e003      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800410a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800410e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800411a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004124:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d055      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800412e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004136:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800413a:	d033      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800413c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004140:	d82c      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004146:	d02f      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414c:	d826      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800414e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004152:	d02b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004154:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004158:	d820      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800415a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800415e:	d012      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004164:	d81a      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d022      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	d115      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004174:	3308      	adds	r3, #8
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fdef 	bl	8004d5c <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004184:	e015      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fe96 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800419a:	e00a      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80041a4:	bf00      	nop
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041ba:	4b5c      	ldr	r3, [pc, #368]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ca:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f002 0308 	and.w	r3, r2, #8
 80041e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d01e      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004206:	d10c      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800420c:	3328      	adds	r3, #40	@ 0x28
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fe55 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004222:	4b42      	ldr	r3, [pc, #264]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800422a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	4a3e      	ldr	r2, [pc, #248]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0310 	and.w	r3, r2, #16
 8004244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800424e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d01e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800425c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800426a:	3328      	adds	r3, #40	@ 0x28
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fe26 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004280:	4b2a      	ldr	r3, [pc, #168]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800428c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004290:	4a26      	ldr	r2, [pc, #152]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042b0:	460b      	mov	r3, r1
 80042b2:	4313      	orrs	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c2:	d022      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80042c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c8:	d81b      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d2:	d00b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80042d4:	e015      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042da:	3308      	adds	r3, #8
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd3c 	bl	8004d5c <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ea:	e00f      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f0:	3328      	adds	r3, #40	@ 0x28
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fde3 	bl	8004ec0 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004300:	e004      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004308:	e000      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800430a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800431c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004320:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004324:	4a01      	ldr	r2, [pc, #4]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004326:	430b      	orrs	r3, r1
 8004328:	6593      	str	r3, [r2, #88]	@ 0x58
 800432a:	e005      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800432c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004334:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004346:	2300      	movs	r3, #0
 8004348:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800434a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d03b      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004360:	d01f      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004362:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004366:	d818      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004368:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436c:	d003      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800436e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004372:	d007      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004374:	e011      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004376:	4b64      	ldr	r3, [pc, #400]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	4a63      	ldr	r2, [pc, #396]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800437c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004382:	e00f      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004388:	3328      	adds	r3, #40	@ 0x28
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd97 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004398:	e004      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80043a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ac:	4b56      	ldr	r3, [pc, #344]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043bc:	4a52      	ldr	r2, [pc, #328]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043be:	430b      	orrs	r3, r1
 80043c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c2:	e003      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043da:	2300      	movs	r3, #0
 80043dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80043de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f6:	d007      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80043f8:	e011      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fa:	4b43      	ldr	r3, [pc, #268]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004406:	e00e      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440c:	3308      	adds	r3, #8
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fca3 	bl	8004d5c <RCCEx_PLL2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004426:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800442e:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	4a32      	ldr	r2, [pc, #200]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800443e:	430b      	orrs	r3, r1
 8004440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004448:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800444c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800445a:	2300      	movs	r3, #0
 800445c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800445e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d00c      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800446c:	3328      	adds	r3, #40	@ 0x28
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd25 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800448e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004490:	2300      	movs	r3, #0
 8004492:	667b      	str	r3, [r7, #100]	@ 0x64
 8004494:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d03a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044aa:	d018      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b0:	d811      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b6:	d014      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044bc:	d80b      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d106      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044dc:	e004      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004500:	4a01      	ldr	r2, [pc, #4]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6553      	str	r3, [r2, #84]	@ 0x54
 8004506:	e005      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004510:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004522:	2300      	movs	r3, #0
 8004524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004526:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004530:	4baa      	ldr	r3, [pc, #680]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004534:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800453c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800453e:	4aa7      	ldr	r2, [pc, #668]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004540:	430b      	orrs	r3, r1
 8004542:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004550:	653b      	str	r3, [r7, #80]	@ 0x50
 8004552:	2300      	movs	r3, #0
 8004554:	657b      	str	r3, [r7, #84]	@ 0x54
 8004556:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004560:	4b9e      	ldr	r3, [pc, #632]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800456c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004570:	4a9a      	ldr	r2, [pc, #616]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004584:	2300      	movs	r3, #0
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004592:	4b92      	ldr	r3, [pc, #584]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004596:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800459a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a8e      	ldr	r2, [pc, #568]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b4:	2300      	movs	r3, #0
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c2:	4b86      	ldr	r3, [pc, #536]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	4a85      	ldr	r2, [pc, #532]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045cc:	6113      	str	r3, [r2, #16]
 80045ce:	4b83      	ldr	r3, [pc, #524]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045da:	4a80      	ldr	r2, [pc, #512]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ee:	2300      	movs	r3, #0
 80045f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045fc:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	4a74      	ldr	r2, [pc, #464]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800460c:	430b      	orrs	r3, r1
 800460e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
 8004622:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800462c:	4b6b      	ldr	r3, [pc, #428]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004630:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	4a67      	ldr	r2, [pc, #412]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800463e:	430b      	orrs	r3, r1
 8004640:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	2100      	movs	r1, #0
 800464c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d011      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004662:	3308      	adds	r3, #8
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb78 	bl	8004d5c <RCCEx_PLL2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800467e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	2100      	movs	r1, #0
 800468c:	6239      	str	r1, [r7, #32]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d011      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800469e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046a2:	3308      	adds	r3, #8
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb58 	bl	8004d5c <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80046b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	2100      	movs	r1, #0
 80046cc:	61b9      	str	r1, [r7, #24]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046d8:	460b      	mov	r3, r1
 80046da:	4313      	orrs	r3, r2
 80046dc:	d011      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e2:	3308      	adds	r3, #8
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fb38 	bl	8004d5c <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80046f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	2100      	movs	r1, #0
 800470c:	6139      	str	r1, [r7, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800471e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004722:	3328      	adds	r3, #40	@ 0x28
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fbca 	bl	8004ec0 <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004732:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800473e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	2100      	movs	r1, #0
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004758:	460b      	mov	r3, r1
 800475a:	4313      	orrs	r3, r2
 800475c:	d011      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004762:	3328      	adds	r3, #40	@ 0x28
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fbaa 	bl	8004ec0 <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004772:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800477e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	2100      	movs	r1, #0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004798:	460b      	mov	r3, r1
 800479a:	4313      	orrs	r3, r2
 800479c:	d011      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047a2:	3328      	adds	r3, #40	@ 0x28
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb8a 	bl	8004ec0 <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80047b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80047c2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047dc:	58024400 	.word	0x58024400

080047e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047e4:	f7fe fd56 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	@ (8004808 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	58024400 	.word	0x58024400
 8004808:	080064a8 	.word	0x080064a8

0800480c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004814:	4ba1      	ldr	r3, [pc, #644]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800481e:	4b9f      	ldr	r3, [pc, #636]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	0b1b      	lsrs	r3, r3, #12
 8004824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004828:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800482a:	4b9c      	ldr	r3, [pc, #624]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004836:	4b99      	ldr	r3, [pc, #612]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8111 	beq.w	8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b02      	cmp	r3, #2
 800485e:	f000 8083 	beq.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	f200 80a1 	bhi.w	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d056      	beq.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004876:	e099      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004878:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02d      	beq.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004884:	4b85      	ldr	r3, [pc, #532]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	08db      	lsrs	r3, r3, #3
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	4a84      	ldr	r2, [pc, #528]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b7b      	ldr	r3, [pc, #492]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048de:	e087      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e065      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	e043      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b48      	ldr	r3, [pc, #288]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049aa:	e021      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049f0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	ee17 2a90 	vmov	r2, s15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	0e1b      	lsrs	r3, r3, #24
 8004a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a72:	ee17 2a90 	vmov	r2, s15
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a7a:	e008      	b.n	8004a8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	03d09000 	.word	0x03d09000
 8004aa4:	46000000 	.word	0x46000000
 8004aa8:	4c742400 	.word	0x4c742400
 8004aac:	4a742400 	.word	0x4a742400
 8004ab0:	4bbebc20 	.word	0x4bbebc20

08004ab4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	@ 0x24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004abc:	4ba1      	ldr	r3, [pc, #644]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ac6:	4b9f      	ldr	r3, [pc, #636]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	0d1b      	lsrs	r3, r3, #20
 8004acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ade:	4b99      	ldr	r3, [pc, #612]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8111 	beq.w	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f000 8083 	beq.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d056      	beq.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b1e:	e099      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b20:	4b88      	ldr	r3, [pc, #544]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02d      	beq.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b2c:	4b85      	ldr	r3, [pc, #532]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	4a84      	ldr	r2, [pc, #528]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b7b      	ldr	r3, [pc, #492]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b86:	e087      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bca:	e065      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0e:	e043      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b48      	ldr	r3, [pc, #288]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c52:	e021      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c98:	4b2a      	ldr	r3, [pc, #168]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbe:	ee17 2a90 	vmov	r2, s15
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cec:	ee17 2a90 	vmov	r2, s15
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1a:	ee17 2a90 	vmov	r2, s15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
}
 8004d36:	bf00      	nop
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	58024400 	.word	0x58024400
 8004d48:	03d09000 	.word	0x03d09000
 8004d4c:	46000000 	.word	0x46000000
 8004d50:	4c742400 	.word	0x4c742400
 8004d54:	4a742400 	.word	0x4a742400
 8004d58:	4bbebc20 	.word	0x4bbebc20

08004d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6a:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d101      	bne.n	8004d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e099      	b.n	8004eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fc ff43 	bl	8001c10 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d8e:	f7fc ff3f 	bl	8001c10 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e086      	b.n	8004eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004da0:	4b45      	ldr	r3, [pc, #276]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dac:	4b42      	ldr	r3, [pc, #264]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	493f      	ldr	r1, [pc, #252]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	025b      	lsls	r3, r3, #9
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004df0:	4931      	ldr	r1, [pc, #196]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004df6:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	492d      	ldr	r1, [pc, #180]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	f023 0220 	bic.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4928      	ldr	r1, [pc, #160]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	f023 0310 	bic.w	r3, r3, #16
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <RCCEx_PLL2_Config+0x160>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	69d2      	ldr	r2, [r2, #28]
 8004e32:	00d2      	lsls	r2, r2, #3
 8004e34:	4920      	ldr	r1, [pc, #128]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	f043 0310 	orr.w	r3, r3, #16
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e58:	e00f      	b.n	8004e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e60:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	4a14      	ldr	r2, [pc, #80]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e6c:	e005      	b.n	8004e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a11      	ldr	r2, [pc, #68]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc fec3 	bl	8001c10 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e8e:	f7fc febf 	bl	8001c10 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e006      	b.n	8004eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	ffff0007 	.word	0xffff0007

08004ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ece:	4b53      	ldr	r3, [pc, #332]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d101      	bne.n	8004ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e099      	b.n	8005012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ede:	4b4f      	ldr	r3, [pc, #316]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eea:	f7fc fe91 	bl	8001c10 <HAL_GetTick>
 8004eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ef2:	f7fc fe8d 	bl	8001c10 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e086      	b.n	8005012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f04:	4b45      	ldr	r3, [pc, #276]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f10:	4b42      	ldr	r3, [pc, #264]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	493f      	ldr	r1, [pc, #252]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f54:	4931      	ldr	r1, [pc, #196]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f5a:	4b30      	ldr	r3, [pc, #192]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	492d      	ldr	r1, [pc, #180]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4928      	ldr	r1, [pc, #160]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f7e:	4b27      	ldr	r3, [pc, #156]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	4a26      	ldr	r2, [pc, #152]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <RCCEx_PLL3_Config+0x160>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	69d2      	ldr	r2, [r2, #28]
 8004f96:	00d2      	lsls	r2, r2, #3
 8004f98:	4920      	ldr	r1, [pc, #128]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fbc:	e00f      	b.n	8004fde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc4:	4b15      	ldr	r3, [pc, #84]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	4a14      	ldr	r2, [pc, #80]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd0:	e005      	b.n	8004fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a11      	ldr	r2, [pc, #68]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fde:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fc fe11 	bl	8001c10 <HAL_GetTick>
 8004fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff2:	f7fc fe0d 	bl	8001c10 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	ffff0007 	.word	0xffff0007

08005024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e042      	b.n	80050bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fc fc6d 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2224      	movs	r2, #36	@ 0x24
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fd90 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f825 	bl	80050c4 <UART_SetConfig>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e01b      	b.n	80050bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fe0f 	bl	8005cd8 <UART_CheckIdleState>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c8:	b092      	sub	sp, #72	@ 0x48
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4bbe      	ldr	r3, [pc, #760]	@ (80053ec <UART_SetConfig+0x328>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4ab3      	ldr	r2, [pc, #716]	@ (80053f0 <UART_SetConfig+0x32c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800512c:	4313      	orrs	r3, r2
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	4baf      	ldr	r3, [pc, #700]	@ (80053f4 <UART_SetConfig+0x330>)
 8005138:	4013      	ands	r3, r2
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005140:	430b      	orrs	r3, r1
 8005142:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	f023 010f 	bic.w	r1, r3, #15
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4aa6      	ldr	r2, [pc, #664]	@ (80053f8 <UART_SetConfig+0x334>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d177      	bne.n	8005254 <UART_SetConfig+0x190>
 8005164:	4ba5      	ldr	r3, [pc, #660]	@ (80053fc <UART_SetConfig+0x338>)
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800516c:	2b28      	cmp	r3, #40	@ 0x28
 800516e:	d86d      	bhi.n	800524c <UART_SetConfig+0x188>
 8005170:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0xb4>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	0800521d 	.word	0x0800521d
 800517c:	0800524d 	.word	0x0800524d
 8005180:	0800524d 	.word	0x0800524d
 8005184:	0800524d 	.word	0x0800524d
 8005188:	0800524d 	.word	0x0800524d
 800518c:	0800524d 	.word	0x0800524d
 8005190:	0800524d 	.word	0x0800524d
 8005194:	0800524d 	.word	0x0800524d
 8005198:	08005225 	.word	0x08005225
 800519c:	0800524d 	.word	0x0800524d
 80051a0:	0800524d 	.word	0x0800524d
 80051a4:	0800524d 	.word	0x0800524d
 80051a8:	0800524d 	.word	0x0800524d
 80051ac:	0800524d 	.word	0x0800524d
 80051b0:	0800524d 	.word	0x0800524d
 80051b4:	0800524d 	.word	0x0800524d
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	0800524d 	.word	0x0800524d
 80051c0:	0800524d 	.word	0x0800524d
 80051c4:	0800524d 	.word	0x0800524d
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	0800524d 	.word	0x0800524d
 80051d0:	0800524d 	.word	0x0800524d
 80051d4:	0800524d 	.word	0x0800524d
 80051d8:	08005235 	.word	0x08005235
 80051dc:	0800524d 	.word	0x0800524d
 80051e0:	0800524d 	.word	0x0800524d
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	0800524d 	.word	0x0800524d
 80051ec:	0800524d 	.word	0x0800524d
 80051f0:	0800524d 	.word	0x0800524d
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800524d 	.word	0x0800524d
 8005204:	0800524d 	.word	0x0800524d
 8005208:	0800524d 	.word	0x0800524d
 800520c:	0800524d 	.word	0x0800524d
 8005210:	0800524d 	.word	0x0800524d
 8005214:	0800524d 	.word	0x0800524d
 8005218:	08005245 	.word	0x08005245
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e222      	b.n	800566a <UART_SetConfig+0x5a6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e21e      	b.n	800566a <UART_SetConfig+0x5a6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e21a      	b.n	800566a <UART_SetConfig+0x5a6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e216      	b.n	800566a <UART_SetConfig+0x5a6>
 800523c:	2320      	movs	r3, #32
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e212      	b.n	800566a <UART_SetConfig+0x5a6>
 8005244:	2340      	movs	r3, #64	@ 0x40
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e20e      	b.n	800566a <UART_SetConfig+0x5a6>
 800524c:	2380      	movs	r3, #128	@ 0x80
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e20a      	b.n	800566a <UART_SetConfig+0x5a6>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a69      	ldr	r2, [pc, #420]	@ (8005400 <UART_SetConfig+0x33c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d130      	bne.n	80052c0 <UART_SetConfig+0x1fc>
 800525e:	4b67      	ldr	r3, [pc, #412]	@ (80053fc <UART_SetConfig+0x338>)
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b05      	cmp	r3, #5
 8005268:	d826      	bhi.n	80052b8 <UART_SetConfig+0x1f4>
 800526a:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <UART_SetConfig+0x1ac>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	08005289 	.word	0x08005289
 8005274:	08005291 	.word	0x08005291
 8005278:	08005299 	.word	0x08005299
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052a9 	.word	0x080052a9
 8005284:	080052b1 	.word	0x080052b1
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e1ec      	b.n	800566a <UART_SetConfig+0x5a6>
 8005290:	2304      	movs	r3, #4
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e1e8      	b.n	800566a <UART_SetConfig+0x5a6>
 8005298:	2308      	movs	r3, #8
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e1e4      	b.n	800566a <UART_SetConfig+0x5a6>
 80052a0:	2310      	movs	r3, #16
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e1e0      	b.n	800566a <UART_SetConfig+0x5a6>
 80052a8:	2320      	movs	r3, #32
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e1dc      	b.n	800566a <UART_SetConfig+0x5a6>
 80052b0:	2340      	movs	r3, #64	@ 0x40
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e1d8      	b.n	800566a <UART_SetConfig+0x5a6>
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e1d4      	b.n	800566a <UART_SetConfig+0x5a6>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005404 <UART_SetConfig+0x340>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d130      	bne.n	800532c <UART_SetConfig+0x268>
 80052ca:	4b4c      	ldr	r3, [pc, #304]	@ (80053fc <UART_SetConfig+0x338>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d826      	bhi.n	8005324 <UART_SetConfig+0x260>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0x218>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	080052f5 	.word	0x080052f5
 80052e0:	080052fd 	.word	0x080052fd
 80052e4:	08005305 	.word	0x08005305
 80052e8:	0800530d 	.word	0x0800530d
 80052ec:	08005315 	.word	0x08005315
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e1b6      	b.n	800566a <UART_SetConfig+0x5a6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e1b2      	b.n	800566a <UART_SetConfig+0x5a6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e1ae      	b.n	800566a <UART_SetConfig+0x5a6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e1aa      	b.n	800566a <UART_SetConfig+0x5a6>
 8005314:	2320      	movs	r3, #32
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e1a6      	b.n	800566a <UART_SetConfig+0x5a6>
 800531c:	2340      	movs	r3, #64	@ 0x40
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e1a2      	b.n	800566a <UART_SetConfig+0x5a6>
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e19e      	b.n	800566a <UART_SetConfig+0x5a6>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a35      	ldr	r2, [pc, #212]	@ (8005408 <UART_SetConfig+0x344>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d130      	bne.n	8005398 <UART_SetConfig+0x2d4>
 8005336:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <UART_SetConfig+0x338>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b05      	cmp	r3, #5
 8005340:	d826      	bhi.n	8005390 <UART_SetConfig+0x2cc>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x284>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005361 	.word	0x08005361
 800534c:	08005369 	.word	0x08005369
 8005350:	08005371 	.word	0x08005371
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	2300      	movs	r3, #0
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e180      	b.n	800566a <UART_SetConfig+0x5a6>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e17c      	b.n	800566a <UART_SetConfig+0x5a6>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e178      	b.n	800566a <UART_SetConfig+0x5a6>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e174      	b.n	800566a <UART_SetConfig+0x5a6>
 8005380:	2320      	movs	r3, #32
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e170      	b.n	800566a <UART_SetConfig+0x5a6>
 8005388:	2340      	movs	r3, #64	@ 0x40
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e16c      	b.n	800566a <UART_SetConfig+0x5a6>
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e168      	b.n	800566a <UART_SetConfig+0x5a6>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1b      	ldr	r2, [pc, #108]	@ (800540c <UART_SetConfig+0x348>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d142      	bne.n	8005428 <UART_SetConfig+0x364>
 80053a2:	4b16      	ldr	r3, [pc, #88]	@ (80053fc <UART_SetConfig+0x338>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d838      	bhi.n	8005420 <UART_SetConfig+0x35c>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0x2f0>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	08005411 	.word	0x08005411
 80053c8:	08005419 	.word	0x08005419
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e14a      	b.n	800566a <UART_SetConfig+0x5a6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e146      	b.n	800566a <UART_SetConfig+0x5a6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e142      	b.n	800566a <UART_SetConfig+0x5a6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e13e      	b.n	800566a <UART_SetConfig+0x5a6>
 80053ec:	cfff69f3 	.word	0xcfff69f3
 80053f0:	58000c00 	.word	0x58000c00
 80053f4:	11fff4ff 	.word	0x11fff4ff
 80053f8:	40011000 	.word	0x40011000
 80053fc:	58024400 	.word	0x58024400
 8005400:	40004400 	.word	0x40004400
 8005404:	40004800 	.word	0x40004800
 8005408:	40004c00 	.word	0x40004c00
 800540c:	40005000 	.word	0x40005000
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e128      	b.n	800566a <UART_SetConfig+0x5a6>
 8005418:	2340      	movs	r3, #64	@ 0x40
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e124      	b.n	800566a <UART_SetConfig+0x5a6>
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e120      	b.n	800566a <UART_SetConfig+0x5a6>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4acb      	ldr	r2, [pc, #812]	@ (800575c <UART_SetConfig+0x698>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d176      	bne.n	8005520 <UART_SetConfig+0x45c>
 8005432:	4bcb      	ldr	r3, [pc, #812]	@ (8005760 <UART_SetConfig+0x69c>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800543a:	2b28      	cmp	r3, #40	@ 0x28
 800543c:	d86c      	bhi.n	8005518 <UART_SetConfig+0x454>
 800543e:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x380>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005519 	.word	0x08005519
 800544c:	08005519 	.word	0x08005519
 8005450:	08005519 	.word	0x08005519
 8005454:	08005519 	.word	0x08005519
 8005458:	08005519 	.word	0x08005519
 800545c:	08005519 	.word	0x08005519
 8005460:	08005519 	.word	0x08005519
 8005464:	080054f1 	.word	0x080054f1
 8005468:	08005519 	.word	0x08005519
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005519 	.word	0x08005519
 8005484:	080054f9 	.word	0x080054f9
 8005488:	08005519 	.word	0x08005519
 800548c:	08005519 	.word	0x08005519
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005501 	.word	0x08005501
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005509 	.word	0x08005509
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005519 	.word	0x08005519
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e0bc      	b.n	800566a <UART_SetConfig+0x5a6>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e0b8      	b.n	800566a <UART_SetConfig+0x5a6>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e0b4      	b.n	800566a <UART_SetConfig+0x5a6>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e0b0      	b.n	800566a <UART_SetConfig+0x5a6>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e0ac      	b.n	800566a <UART_SetConfig+0x5a6>
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e0a8      	b.n	800566a <UART_SetConfig+0x5a6>
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e0a4      	b.n	800566a <UART_SetConfig+0x5a6>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a8f      	ldr	r2, [pc, #572]	@ (8005764 <UART_SetConfig+0x6a0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d130      	bne.n	800558c <UART_SetConfig+0x4c8>
 800552a:	4b8d      	ldr	r3, [pc, #564]	@ (8005760 <UART_SetConfig+0x69c>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b05      	cmp	r3, #5
 8005534:	d826      	bhi.n	8005584 <UART_SetConfig+0x4c0>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <UART_SetConfig+0x478>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005555 	.word	0x08005555
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005565 	.word	0x08005565
 8005548:	0800556d 	.word	0x0800556d
 800554c:	08005575 	.word	0x08005575
 8005550:	0800557d 	.word	0x0800557d
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e086      	b.n	800566a <UART_SetConfig+0x5a6>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e082      	b.n	800566a <UART_SetConfig+0x5a6>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e07e      	b.n	800566a <UART_SetConfig+0x5a6>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e07a      	b.n	800566a <UART_SetConfig+0x5a6>
 8005574:	2320      	movs	r3, #32
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e076      	b.n	800566a <UART_SetConfig+0x5a6>
 800557c:	2340      	movs	r3, #64	@ 0x40
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e072      	b.n	800566a <UART_SetConfig+0x5a6>
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e06e      	b.n	800566a <UART_SetConfig+0x5a6>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a75      	ldr	r2, [pc, #468]	@ (8005768 <UART_SetConfig+0x6a4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d130      	bne.n	80055f8 <UART_SetConfig+0x534>
 8005596:	4b72      	ldr	r3, [pc, #456]	@ (8005760 <UART_SetConfig+0x69c>)
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d826      	bhi.n	80055f0 <UART_SetConfig+0x52c>
 80055a2:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <UART_SetConfig+0x4e4>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055d1 	.word	0x080055d1
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055e1 	.word	0x080055e1
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e050      	b.n	800566a <UART_SetConfig+0x5a6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e04c      	b.n	800566a <UART_SetConfig+0x5a6>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e048      	b.n	800566a <UART_SetConfig+0x5a6>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e044      	b.n	800566a <UART_SetConfig+0x5a6>
 80055e0:	2320      	movs	r3, #32
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e040      	b.n	800566a <UART_SetConfig+0x5a6>
 80055e8:	2340      	movs	r3, #64	@ 0x40
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e03c      	b.n	800566a <UART_SetConfig+0x5a6>
 80055f0:	2380      	movs	r3, #128	@ 0x80
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e038      	b.n	800566a <UART_SetConfig+0x5a6>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5b      	ldr	r2, [pc, #364]	@ (800576c <UART_SetConfig+0x6a8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d130      	bne.n	8005664 <UART_SetConfig+0x5a0>
 8005602:	4b57      	ldr	r3, [pc, #348]	@ (8005760 <UART_SetConfig+0x69c>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b05      	cmp	r3, #5
 800560c:	d826      	bhi.n	800565c <UART_SetConfig+0x598>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0x550>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	0800562d 	.word	0x0800562d
 8005618:	08005635 	.word	0x08005635
 800561c:	0800563d 	.word	0x0800563d
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	2302      	movs	r3, #2
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e01a      	b.n	800566a <UART_SetConfig+0x5a6>
 8005634:	2304      	movs	r3, #4
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e016      	b.n	800566a <UART_SetConfig+0x5a6>
 800563c:	2308      	movs	r3, #8
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e012      	b.n	800566a <UART_SetConfig+0x5a6>
 8005644:	2310      	movs	r3, #16
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e00e      	b.n	800566a <UART_SetConfig+0x5a6>
 800564c:	2320      	movs	r3, #32
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e00a      	b.n	800566a <UART_SetConfig+0x5a6>
 8005654:	2340      	movs	r3, #64	@ 0x40
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e006      	b.n	800566a <UART_SetConfig+0x5a6>
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e002      	b.n	800566a <UART_SetConfig+0x5a6>
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a3f      	ldr	r2, [pc, #252]	@ (800576c <UART_SetConfig+0x6a8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	f040 80f8 	bne.w	8005866 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005676:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800567a:	2b20      	cmp	r3, #32
 800567c:	dc46      	bgt.n	800570c <UART_SetConfig+0x648>
 800567e:	2b02      	cmp	r3, #2
 8005680:	f2c0 8082 	blt.w	8005788 <UART_SetConfig+0x6c4>
 8005684:	3b02      	subs	r3, #2
 8005686:	2b1e      	cmp	r3, #30
 8005688:	d87e      	bhi.n	8005788 <UART_SetConfig+0x6c4>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x5cc>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	08005713 	.word	0x08005713
 8005694:	08005789 	.word	0x08005789
 8005698:	0800571b 	.word	0x0800571b
 800569c:	08005789 	.word	0x08005789
 80056a0:	08005789 	.word	0x08005789
 80056a4:	08005789 	.word	0x08005789
 80056a8:	0800572b 	.word	0x0800572b
 80056ac:	08005789 	.word	0x08005789
 80056b0:	08005789 	.word	0x08005789
 80056b4:	08005789 	.word	0x08005789
 80056b8:	08005789 	.word	0x08005789
 80056bc:	08005789 	.word	0x08005789
 80056c0:	08005789 	.word	0x08005789
 80056c4:	08005789 	.word	0x08005789
 80056c8:	0800573b 	.word	0x0800573b
 80056cc:	08005789 	.word	0x08005789
 80056d0:	08005789 	.word	0x08005789
 80056d4:	08005789 	.word	0x08005789
 80056d8:	08005789 	.word	0x08005789
 80056dc:	08005789 	.word	0x08005789
 80056e0:	08005789 	.word	0x08005789
 80056e4:	08005789 	.word	0x08005789
 80056e8:	08005789 	.word	0x08005789
 80056ec:	08005789 	.word	0x08005789
 80056f0:	08005789 	.word	0x08005789
 80056f4:	08005789 	.word	0x08005789
 80056f8:	08005789 	.word	0x08005789
 80056fc:	08005789 	.word	0x08005789
 8005700:	08005789 	.word	0x08005789
 8005704:	08005789 	.word	0x08005789
 8005708:	0800577b 	.word	0x0800577b
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d037      	beq.n	8005780 <UART_SetConfig+0x6bc>
 8005710:	e03a      	b.n	8005788 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005712:	f7ff f865 	bl	80047e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005718:	e03c      	b.n	8005794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800571a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f874 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005728:	e034      	b.n	8005794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800572a:	f107 0318 	add.w	r3, r7, #24
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff f9c0 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005738:	e02c      	b.n	8005794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800573a:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <UART_SetConfig+0x69c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005746:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <UART_SetConfig+0x69c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	4a07      	ldr	r2, [pc, #28]	@ (8005770 <UART_SetConfig+0x6ac>)
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005758:	e01c      	b.n	8005794 <UART_SetConfig+0x6d0>
 800575a:	bf00      	nop
 800575c:	40011400 	.word	0x40011400
 8005760:	58024400 	.word	0x58024400
 8005764:	40007800 	.word	0x40007800
 8005768:	40007c00 	.word	0x40007c00
 800576c:	58000c00 	.word	0x58000c00
 8005770:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005774:	4b9d      	ldr	r3, [pc, #628]	@ (80059ec <UART_SetConfig+0x928>)
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005778:	e00c      	b.n	8005794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800577a:	4b9d      	ldr	r3, [pc, #628]	@ (80059f0 <UART_SetConfig+0x92c>)
 800577c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800577e:	e009      	b.n	8005794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005786:	e005      	b.n	8005794 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005792:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 81de 	beq.w	8005b58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	4a94      	ldr	r2, [pc, #592]	@ (80059f4 <UART_SetConfig+0x930>)
 80057a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a6:	461a      	mov	r2, r3
 80057a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057bc:	429a      	cmp	r2, r3
 80057be:	d305      	bcc.n	80057cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d903      	bls.n	80057d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057d2:	e1c1      	b.n	8005b58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d6:	2200      	movs	r2, #0
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	60fa      	str	r2, [r7, #12]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	4a84      	ldr	r2, [pc, #528]	@ (80059f4 <UART_SetConfig+0x930>)
 80057e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057f6:	f7fa fd73 	bl	80002e0 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	020b      	lsls	r3, r1, #8
 800580c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005810:	0202      	lsls	r2, r0, #8
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	6849      	ldr	r1, [r1, #4]
 8005816:	0849      	lsrs	r1, r1, #1
 8005818:	2000      	movs	r0, #0
 800581a:	460c      	mov	r4, r1
 800581c:	4605      	mov	r5, r0
 800581e:	eb12 0804 	adds.w	r8, r2, r4
 8005822:	eb43 0905 	adc.w	r9, r3, r5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	469a      	mov	sl, r3
 800582e:	4693      	mov	fp, r2
 8005830:	4652      	mov	r2, sl
 8005832:	465b      	mov	r3, fp
 8005834:	4640      	mov	r0, r8
 8005836:	4649      	mov	r1, r9
 8005838:	f7fa fd52 	bl	80002e0 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d308      	bcc.n	800585e <UART_SetConfig+0x79a>
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005852:	d204      	bcs.n	800585e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e17c      	b.n	8005b58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005864:	e178      	b.n	8005b58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800586e:	f040 80c5 	bne.w	80059fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005872:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005876:	2b20      	cmp	r3, #32
 8005878:	dc48      	bgt.n	800590c <UART_SetConfig+0x848>
 800587a:	2b00      	cmp	r3, #0
 800587c:	db7b      	blt.n	8005976 <UART_SetConfig+0x8b2>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d879      	bhi.n	8005976 <UART_SetConfig+0x8b2>
 8005882:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <UART_SetConfig+0x7c4>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	08005913 	.word	0x08005913
 800588c:	0800591b 	.word	0x0800591b
 8005890:	08005977 	.word	0x08005977
 8005894:	08005977 	.word	0x08005977
 8005898:	08005923 	.word	0x08005923
 800589c:	08005977 	.word	0x08005977
 80058a0:	08005977 	.word	0x08005977
 80058a4:	08005977 	.word	0x08005977
 80058a8:	08005933 	.word	0x08005933
 80058ac:	08005977 	.word	0x08005977
 80058b0:	08005977 	.word	0x08005977
 80058b4:	08005977 	.word	0x08005977
 80058b8:	08005977 	.word	0x08005977
 80058bc:	08005977 	.word	0x08005977
 80058c0:	08005977 	.word	0x08005977
 80058c4:	08005977 	.word	0x08005977
 80058c8:	08005943 	.word	0x08005943
 80058cc:	08005977 	.word	0x08005977
 80058d0:	08005977 	.word	0x08005977
 80058d4:	08005977 	.word	0x08005977
 80058d8:	08005977 	.word	0x08005977
 80058dc:	08005977 	.word	0x08005977
 80058e0:	08005977 	.word	0x08005977
 80058e4:	08005977 	.word	0x08005977
 80058e8:	08005977 	.word	0x08005977
 80058ec:	08005977 	.word	0x08005977
 80058f0:	08005977 	.word	0x08005977
 80058f4:	08005977 	.word	0x08005977
 80058f8:	08005977 	.word	0x08005977
 80058fc:	08005977 	.word	0x08005977
 8005900:	08005977 	.word	0x08005977
 8005904:	08005977 	.word	0x08005977
 8005908:	08005969 	.word	0x08005969
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d02e      	beq.n	800596e <UART_SetConfig+0x8aa>
 8005910:	e031      	b.n	8005976 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005912:	f7fd fcef 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8005916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005918:	e033      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591a:	f7fd fd01 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 800591e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005920:	e02f      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe ff70 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005930:	e027      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005932:	f107 0318 	add.w	r3, r7, #24
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff f8bc 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005940:	e01f      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005942:	4b2d      	ldr	r3, [pc, #180]	@ (80059f8 <UART_SetConfig+0x934>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800594e:	4b2a      	ldr	r3, [pc, #168]	@ (80059f8 <UART_SetConfig+0x934>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	4a24      	ldr	r2, [pc, #144]	@ (80059ec <UART_SetConfig+0x928>)
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005960:	e00f      	b.n	8005982 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005962:	4b22      	ldr	r3, [pc, #136]	@ (80059ec <UART_SetConfig+0x928>)
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005966:	e00c      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005968:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <UART_SetConfig+0x92c>)
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596c:	e009      	b.n	8005982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	e005      	b.n	8005982 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80e7 	beq.w	8005b58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <UART_SetConfig+0x930>)
 8005990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005994:	461a      	mov	r2, r3
 8005996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005998:	fbb3 f3f2 	udiv	r3, r3, r2
 800599c:	005a      	lsls	r2, r3, #1
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	441a      	add	r2, r3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	d916      	bls.n	80059e4 <UART_SetConfig+0x920>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d212      	bcs.n	80059e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f023 030f 	bic.w	r3, r3, #15
 80059c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059d6:	4313      	orrs	r3, r2
 80059d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	e0b9      	b.n	8005b58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059ea:	e0b5      	b.n	8005b58 <UART_SetConfig+0xa94>
 80059ec:	03d09000 	.word	0x03d09000
 80059f0:	003d0900 	.word	0x003d0900
 80059f4:	080064b8 	.word	0x080064b8
 80059f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80059fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	dc49      	bgt.n	8005a98 <UART_SetConfig+0x9d4>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db7c      	blt.n	8005b02 <UART_SetConfig+0xa3e>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d87a      	bhi.n	8005b02 <UART_SetConfig+0xa3e>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <UART_SetConfig+0x950>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a9f 	.word	0x08005a9f
 8005a18:	08005aa7 	.word	0x08005aa7
 8005a1c:	08005b03 	.word	0x08005b03
 8005a20:	08005b03 	.word	0x08005b03
 8005a24:	08005aaf 	.word	0x08005aaf
 8005a28:	08005b03 	.word	0x08005b03
 8005a2c:	08005b03 	.word	0x08005b03
 8005a30:	08005b03 	.word	0x08005b03
 8005a34:	08005abf 	.word	0x08005abf
 8005a38:	08005b03 	.word	0x08005b03
 8005a3c:	08005b03 	.word	0x08005b03
 8005a40:	08005b03 	.word	0x08005b03
 8005a44:	08005b03 	.word	0x08005b03
 8005a48:	08005b03 	.word	0x08005b03
 8005a4c:	08005b03 	.word	0x08005b03
 8005a50:	08005b03 	.word	0x08005b03
 8005a54:	08005acf 	.word	0x08005acf
 8005a58:	08005b03 	.word	0x08005b03
 8005a5c:	08005b03 	.word	0x08005b03
 8005a60:	08005b03 	.word	0x08005b03
 8005a64:	08005b03 	.word	0x08005b03
 8005a68:	08005b03 	.word	0x08005b03
 8005a6c:	08005b03 	.word	0x08005b03
 8005a70:	08005b03 	.word	0x08005b03
 8005a74:	08005b03 	.word	0x08005b03
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b03 	.word	0x08005b03
 8005a80:	08005b03 	.word	0x08005b03
 8005a84:	08005b03 	.word	0x08005b03
 8005a88:	08005b03 	.word	0x08005b03
 8005a8c:	08005b03 	.word	0x08005b03
 8005a90:	08005b03 	.word	0x08005b03
 8005a94:	08005af5 	.word	0x08005af5
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d02e      	beq.n	8005afa <UART_SetConfig+0xa36>
 8005a9c:	e031      	b.n	8005b02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9e:	f7fd fc29 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8005aa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005aa4:	e033      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa6:	f7fd fc3b 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8005aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005aac:	e02f      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe feaa 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	e027      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fff6 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005acc:	e01f      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ace:	4b2d      	ldr	r3, [pc, #180]	@ (8005b84 <UART_SetConfig+0xac0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ada:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <UART_SetConfig+0xac0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	08db      	lsrs	r3, r3, #3
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	4a28      	ldr	r2, [pc, #160]	@ (8005b88 <UART_SetConfig+0xac4>)
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aec:	e00f      	b.n	8005b0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <UART_SetConfig+0xac4>)
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af2:	e00c      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005af4:	4b25      	ldr	r3, [pc, #148]	@ (8005b8c <UART_SetConfig+0xac8>)
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af8:	e009      	b.n	8005b0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b00:	e005      	b.n	8005b0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d021      	beq.n	8005b58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	4a1d      	ldr	r2, [pc, #116]	@ (8005b90 <UART_SetConfig+0xacc>)
 8005b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d909      	bls.n	8005b52 <UART_SetConfig+0xa8e>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b44:	d205      	bcs.n	8005b52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e002      	b.n	8005b58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3748      	adds	r7, #72	@ 0x48
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
 8005b88:	03d09000 	.word	0x03d09000
 8005b8c:	003d0900 	.word	0x003d0900
 8005b90:	080064b8 	.word	0x080064b8

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c92:	d10a      	bne.n	8005caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b098      	sub	sp, #96	@ 0x60
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fb ff92 	bl	8001c10 <HAL_GetTick>
 8005cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d12f      	bne.n	8005d5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f88e 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d022      	beq.n	8005d5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e063      	b.n	8005e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d149      	bne.n	8005dfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d72:	2200      	movs	r2, #0
 8005d74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f857 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d03c      	beq.n	8005dfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	623b      	str	r3, [r7, #32]
   return(result);
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd6:	61fa      	str	r2, [r7, #28]
 8005dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	617b      	str	r3, [r7, #20]
   return(result);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e012      	b.n	8005e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3758      	adds	r7, #88	@ 0x58
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3c:	e04f      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d04b      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fb fee3 	bl	8001c10 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e04e      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d037      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d034      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d031      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d110      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f839 	bl	8005f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e029      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb8:	d111      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f81f 	bl	8005f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e00f      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d0a0      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b095      	sub	sp, #84	@ 0x54
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e6      	bne.n	8005f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <UART_EndRxTransfer+0xc8>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d118      	bne.n	8005fb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fc4:	bf00      	nop
 8005fc6:	3754      	adds	r7, #84	@ 0x54
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	effffffe 	.word	0xeffffffe

08005fd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_UARTEx_DisableFifoMode+0x16>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e027      	b.n	800603a <HAL_UARTEx_DisableFifoMode+0x66>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2224      	movs	r2, #36	@ 0x24
 8005ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800605a:	2302      	movs	r3, #2
 800605c:	e02d      	b.n	80060ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2224      	movs	r2, #36	@ 0x24
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f850 	bl	8006140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e02d      	b.n	8006136 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	@ 0x24
 80060e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f812 	bl	8006140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006160:	e031      	b.n	80061c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006162:	2310      	movs	r3, #16
 8006164:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006166:	2310      	movs	r3, #16
 8006168:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	0e5b      	lsrs	r3, r3, #25
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	0f5b      	lsrs	r3, r3, #29
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	7b3a      	ldrb	r2, [r7, #12]
 800618e:	4911      	ldr	r1, [pc, #68]	@ (80061d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006190:	5c8a      	ldrb	r2, [r1, r2]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006196:	7b3a      	ldrb	r2, [r7, #12]
 8006198:	490f      	ldr	r1, [pc, #60]	@ (80061d8 <UARTEx_SetNbDataToProcess+0x98>)
 800619a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800619c:	fb93 f3f2 	sdiv	r3, r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	7b7a      	ldrb	r2, [r7, #13]
 80061ac:	4909      	ldr	r1, [pc, #36]	@ (80061d4 <UARTEx_SetNbDataToProcess+0x94>)
 80061ae:	5c8a      	ldrb	r2, [r1, r2]
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061b4:	7b7a      	ldrb	r2, [r7, #13]
 80061b6:	4908      	ldr	r1, [pc, #32]	@ (80061d8 <UARTEx_SetNbDataToProcess+0x98>)
 80061b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80061be:	b29a      	uxth	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	080064d0 	.word	0x080064d0
 80061d8:	080064d8 	.word	0x080064d8

080061dc <malloc>:
 80061dc:	4b02      	ldr	r3, [pc, #8]	@ (80061e8 <malloc+0xc>)
 80061de:	4601      	mov	r1, r0
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	f000 b82d 	b.w	8006240 <_malloc_r>
 80061e6:	bf00      	nop
 80061e8:	2400005c 	.word	0x2400005c

080061ec <free>:
 80061ec:	4b02      	ldr	r3, [pc, #8]	@ (80061f8 <free+0xc>)
 80061ee:	4601      	mov	r1, r0
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f000 b903 	b.w	80063fc <_free_r>
 80061f6:	bf00      	nop
 80061f8:	2400005c 	.word	0x2400005c

080061fc <sbrk_aligned>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4e0f      	ldr	r6, [pc, #60]	@ (800623c <sbrk_aligned+0x40>)
 8006200:	460c      	mov	r4, r1
 8006202:	6831      	ldr	r1, [r6, #0]
 8006204:	4605      	mov	r5, r0
 8006206:	b911      	cbnz	r1, 800620e <sbrk_aligned+0x12>
 8006208:	f000 f8ae 	bl	8006368 <_sbrk_r>
 800620c:	6030      	str	r0, [r6, #0]
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f8a9 	bl	8006368 <_sbrk_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d103      	bne.n	8006222 <sbrk_aligned+0x26>
 800621a:	f04f 34ff 	mov.w	r4, #4294967295
 800621e:	4620      	mov	r0, r4
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	1cc4      	adds	r4, r0, #3
 8006224:	f024 0403 	bic.w	r4, r4, #3
 8006228:	42a0      	cmp	r0, r4
 800622a:	d0f8      	beq.n	800621e <sbrk_aligned+0x22>
 800622c:	1a21      	subs	r1, r4, r0
 800622e:	4628      	mov	r0, r5
 8006230:	f000 f89a 	bl	8006368 <_sbrk_r>
 8006234:	3001      	adds	r0, #1
 8006236:	d1f2      	bne.n	800621e <sbrk_aligned+0x22>
 8006238:	e7ef      	b.n	800621a <sbrk_aligned+0x1e>
 800623a:	bf00      	nop
 800623c:	24000428 	.word	0x24000428

08006240 <_malloc_r>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	1ccd      	adds	r5, r1, #3
 8006246:	f025 0503 	bic.w	r5, r5, #3
 800624a:	3508      	adds	r5, #8
 800624c:	2d0c      	cmp	r5, #12
 800624e:	bf38      	it	cc
 8006250:	250c      	movcc	r5, #12
 8006252:	2d00      	cmp	r5, #0
 8006254:	4606      	mov	r6, r0
 8006256:	db01      	blt.n	800625c <_malloc_r+0x1c>
 8006258:	42a9      	cmp	r1, r5
 800625a:	d904      	bls.n	8006266 <_malloc_r+0x26>
 800625c:	230c      	movs	r3, #12
 800625e:	6033      	str	r3, [r6, #0]
 8006260:	2000      	movs	r0, #0
 8006262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800633c <_malloc_r+0xfc>
 800626a:	f000 f869 	bl	8006340 <__malloc_lock>
 800626e:	f8d8 3000 	ldr.w	r3, [r8]
 8006272:	461c      	mov	r4, r3
 8006274:	bb44      	cbnz	r4, 80062c8 <_malloc_r+0x88>
 8006276:	4629      	mov	r1, r5
 8006278:	4630      	mov	r0, r6
 800627a:	f7ff ffbf 	bl	80061fc <sbrk_aligned>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	4604      	mov	r4, r0
 8006282:	d158      	bne.n	8006336 <_malloc_r+0xf6>
 8006284:	f8d8 4000 	ldr.w	r4, [r8]
 8006288:	4627      	mov	r7, r4
 800628a:	2f00      	cmp	r7, #0
 800628c:	d143      	bne.n	8006316 <_malloc_r+0xd6>
 800628e:	2c00      	cmp	r4, #0
 8006290:	d04b      	beq.n	800632a <_malloc_r+0xea>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	4639      	mov	r1, r7
 8006296:	4630      	mov	r0, r6
 8006298:	eb04 0903 	add.w	r9, r4, r3
 800629c:	f000 f864 	bl	8006368 <_sbrk_r>
 80062a0:	4581      	cmp	r9, r0
 80062a2:	d142      	bne.n	800632a <_malloc_r+0xea>
 80062a4:	6821      	ldr	r1, [r4, #0]
 80062a6:	1a6d      	subs	r5, r5, r1
 80062a8:	4629      	mov	r1, r5
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ffa6 	bl	80061fc <sbrk_aligned>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d03a      	beq.n	800632a <_malloc_r+0xea>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	442b      	add	r3, r5
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	f8d8 3000 	ldr.w	r3, [r8]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	bb62      	cbnz	r2, 800631c <_malloc_r+0xdc>
 80062c2:	f8c8 7000 	str.w	r7, [r8]
 80062c6:	e00f      	b.n	80062e8 <_malloc_r+0xa8>
 80062c8:	6822      	ldr	r2, [r4, #0]
 80062ca:	1b52      	subs	r2, r2, r5
 80062cc:	d420      	bmi.n	8006310 <_malloc_r+0xd0>
 80062ce:	2a0b      	cmp	r2, #11
 80062d0:	d917      	bls.n	8006302 <_malloc_r+0xc2>
 80062d2:	1961      	adds	r1, r4, r5
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	6025      	str	r5, [r4, #0]
 80062d8:	bf18      	it	ne
 80062da:	6059      	strne	r1, [r3, #4]
 80062dc:	6863      	ldr	r3, [r4, #4]
 80062de:	bf08      	it	eq
 80062e0:	f8c8 1000 	streq.w	r1, [r8]
 80062e4:	5162      	str	r2, [r4, r5]
 80062e6:	604b      	str	r3, [r1, #4]
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 f82f 	bl	800634c <__malloc_unlock>
 80062ee:	f104 000b 	add.w	r0, r4, #11
 80062f2:	1d23      	adds	r3, r4, #4
 80062f4:	f020 0007 	bic.w	r0, r0, #7
 80062f8:	1ac2      	subs	r2, r0, r3
 80062fa:	bf1c      	itt	ne
 80062fc:	1a1b      	subne	r3, r3, r0
 80062fe:	50a3      	strne	r3, [r4, r2]
 8006300:	e7af      	b.n	8006262 <_malloc_r+0x22>
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	42a3      	cmp	r3, r4
 8006306:	bf0c      	ite	eq
 8006308:	f8c8 2000 	streq.w	r2, [r8]
 800630c:	605a      	strne	r2, [r3, #4]
 800630e:	e7eb      	b.n	80062e8 <_malloc_r+0xa8>
 8006310:	4623      	mov	r3, r4
 8006312:	6864      	ldr	r4, [r4, #4]
 8006314:	e7ae      	b.n	8006274 <_malloc_r+0x34>
 8006316:	463c      	mov	r4, r7
 8006318:	687f      	ldr	r7, [r7, #4]
 800631a:	e7b6      	b.n	800628a <_malloc_r+0x4a>
 800631c:	461a      	mov	r2, r3
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	42a3      	cmp	r3, r4
 8006322:	d1fb      	bne.n	800631c <_malloc_r+0xdc>
 8006324:	2300      	movs	r3, #0
 8006326:	6053      	str	r3, [r2, #4]
 8006328:	e7de      	b.n	80062e8 <_malloc_r+0xa8>
 800632a:	230c      	movs	r3, #12
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	4630      	mov	r0, r6
 8006330:	f000 f80c 	bl	800634c <__malloc_unlock>
 8006334:	e794      	b.n	8006260 <_malloc_r+0x20>
 8006336:	6005      	str	r5, [r0, #0]
 8006338:	e7d6      	b.n	80062e8 <_malloc_r+0xa8>
 800633a:	bf00      	nop
 800633c:	2400042c 	.word	0x2400042c

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	@ (8006348 <__malloc_lock+0x8>)
 8006342:	f000 b84b 	b.w	80063dc <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	2400056c 	.word	0x2400056c

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	@ (8006354 <__malloc_unlock+0x8>)
 800634e:	f000 b846 	b.w	80063de <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	2400056c 	.word	0x2400056c

08006358 <memset>:
 8006358:	4402      	add	r2, r0
 800635a:	4603      	mov	r3, r0
 800635c:	4293      	cmp	r3, r2
 800635e:	d100      	bne.n	8006362 <memset+0xa>
 8006360:	4770      	bx	lr
 8006362:	f803 1b01 	strb.w	r1, [r3], #1
 8006366:	e7f9      	b.n	800635c <memset+0x4>

08006368 <_sbrk_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d06      	ldr	r5, [pc, #24]	@ (8006384 <_sbrk_r+0x1c>)
 800636c:	2300      	movs	r3, #0
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	f7fb fb64 	bl	8001a40 <_sbrk>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_sbrk_r+0x1a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_sbrk_r+0x1a>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	24000568 	.word	0x24000568

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	@ (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2400005c 	.word	0x2400005c

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	@ (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	@ (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	@ (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	@ (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 f872 	bl	8006490 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	080064e8 	.word	0x080064e8
 80063d0:	080064e8 	.word	0x080064e8
 80063d4:	080064e8 	.word	0x080064e8
 80063d8:	080064ec 	.word	0x080064ec

080063dc <__retarget_lock_acquire_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_release_recursive>:
 80063de:	4770      	bx	lr

080063e0 <memcpy>:
 80063e0:	440a      	add	r2, r1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e8:	d100      	bne.n	80063ec <memcpy+0xc>
 80063ea:	4770      	bx	lr
 80063ec:	b510      	push	{r4, lr}
 80063ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f6:	4291      	cmp	r1, r2
 80063f8:	d1f9      	bne.n	80063ee <memcpy+0xe>
 80063fa:	bd10      	pop	{r4, pc}

080063fc <_free_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4605      	mov	r5, r0
 8006400:	2900      	cmp	r1, #0
 8006402:	d041      	beq.n	8006488 <_free_r+0x8c>
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f0c      	subs	r4, r1, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f7ff ff96 	bl	8006340 <__malloc_lock>
 8006414:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <_free_r+0x90>)
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b933      	cbnz	r3, 8006428 <_free_r+0x2c>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6014      	str	r4, [r2, #0]
 800641e:	4628      	mov	r0, r5
 8006420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006424:	f7ff bf92 	b.w	800634c <__malloc_unlock>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d908      	bls.n	800643e <_free_r+0x42>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	1821      	adds	r1, r4, r0
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1809      	addeq	r1, r1, r0
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	e7ed      	b.n	800641a <_free_r+0x1e>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x4c>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x42>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1850      	adds	r0, r2, r1
 800644c:	42a0      	cmp	r0, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x6c>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	4401      	add	r1, r0
 8006454:	1850      	adds	r0, r2, r1
 8006456:	4283      	cmp	r3, r0
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1e0      	bne.n	800641e <_free_r+0x22>
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6053      	str	r3, [r2, #4]
 8006462:	4408      	add	r0, r1
 8006464:	6010      	str	r0, [r2, #0]
 8006466:	e7da      	b.n	800641e <_free_r+0x22>
 8006468:	d902      	bls.n	8006470 <_free_r+0x74>
 800646a:	230c      	movs	r3, #12
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	e7d6      	b.n	800641e <_free_r+0x22>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	1821      	adds	r1, r4, r0
 8006474:	428b      	cmp	r3, r1
 8006476:	bf04      	itt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	bf04      	itt	eq
 8006480:	1809      	addeq	r1, r1, r0
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6054      	str	r4, [r2, #4]
 8006486:	e7ca      	b.n	800641e <_free_r+0x22>
 8006488:	bd38      	pop	{r3, r4, r5, pc}
 800648a:	bf00      	nop
 800648c:	2400042c 	.word	0x2400042c

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
